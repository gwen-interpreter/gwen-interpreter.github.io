---
sidebar_position: 2
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Get Started

## System requirements
- Linux, Mac or Windows
- Chrome, Firefox, Safari, or Edge or IE web browser
- Java JRE 8+ (version 1.8 or higher)
  - You can check if you have Java installed by opening a command prompt and typing `java -version.` A version will be displayed if you do have it installed ([install Java](https://www.java.com/en/download/manual.jsp) otherwise).
- node
  - Required if you will be using Gwen in a JS project with npm ([install node](https://nodejs.org/en/download/package-manager)).

:::tip Before you start

Learn about the key Gwen concepts in our [introduction](introduction).

:::

## Gwen Setup

<Tabs
  defaultValue="js"
  values={[
    {label: 'JS Project', value: 'js'},
    {label: 'Standalone', value: 'standalone'},
    {label: 'Workspace', value: 'workspace'},
  ]}>
<TabItem value="js">

Adding Gwen to a JS project is the recommended approach. If you don't have one, you can create one by installing [node](https://nodejs.org/en/download/package-manager) and running `npm init -y` in a new directory and use that.

Run the following commands in the root of your project to add Gwen a dev dependency and initialise the standard file system setup:

<Tabs
  defaultValue="npm"
  values={[
    {label: 'npm', value: 'npm'},
    {label: 'Yarn', value: 'yarn'},
  ]}>
<TabItem value="npm">

```shell
npm i --save-dev @gweninterpreter/gwen-web
npm run gwen init
```

</TabItem>
<TabItem value="yarn">

```shell
yarn add -D @gweninterpreter/gwen-web
yarn gwen init
```

</TabItem>
</Tabs>

The `init` command will generate the following files and subdirectories in your project:
```
 /project                    # Your project root
 ├── gwen.conf               # Common/default Gwen settings
 └── /gwen
     ├── .gitignore          # Git ignore file
     ├── README.md
     ├── /browsers           # Browser settings
     │   ├── chrome.conf     # - default is chrome
     │   ├── edge.conf
     │   ├── firefox.conf
     │   ├── safari.conf
     │   ├── ie.conf
     │   ├── remote.conf     # Remote web driver settings
     │   └── README.md
     ├── /env                # Environment settings
     │   ├── local.conf      # - default is local
     │   ├── dev.conf
     │   ├── test.conf
     │   └── README.md
     ├── /features           # Features and associative meta
     │   └── README.md
     ├── /meta               # Optional common/reusable meta
     │   └── README.md
     ├── /output             # Output directory
     └── /samples            # Sample features and meta
```

:::info Automatic Updates

Automatic installs and updates to the latest version of Gwen-Web are enabled by default for JS projects.

You can disable automatic updates by setting the `version` field in the `gwenWeb` section of your `package.json` file to a specific version.

```json
"gwenWeb": {
  "version": "3.0.0"
}
```

Setting it to `latest` will re-enable automatic updates.

:::

</TabItem>
<TabItem value="standalone">

Perform the following to install Gwen as a standalone project on your machine:

1. Browse the [Gwen-Web releases](https://github.com/gwen-interpreter/gwen-web/releases) and download the binary ZIP package of the version you want to install 
2. Extract the downloaded ZIP into a desired directory

This will give you the following files and subdirectories:
```
 /project                    # Your project root
 ├── gwen                    # Linux launch script
 ├── gwen.bat                # Windows launch script
 ├── /bin                    # Gwen scripts
 ├── /lib                    # Gwen binaries
 └── /samples                # Sample features and meta
 ```

:::caution No Automatic Updates

There are no automatic updates with the standalone approach. You will need to repeat this process when you want to upgrade or downgrade your installed Gwen verison. You will also need to do the same on your build server(s) if you plan to run Gwen there.

:::

</TabItem>
<TabItem value="workspace">

:::caution Deprecated

[Gwen workspaces](https://gweninterpreter.wordpress.com/2017/12/18/gwen-workspaces/) are deprecated in favor of JS projects coming to Gwen 3.

:::

</TabItem>
</Tabs>

## Initialise project

<Tabs
  defaultValue="js"
  values={[
    {label: 'JS Project', value: 'js'},
    {label: 'Standalone Project', value: 'standalone'},
  ]}>
<TabItem value="js">

Run the following command in the root of your project where you added Gwen as a dev dependency:

<Tabs
  defaultValue="npm"
  values={[
    {label: 'npm', value: 'npm'},
    {label: 'Yarn', value: 'yarn'},
  ]}>
<TabItem value="npm">

```shell
npm run gwen init
```

</TabItem>
<TabItem value="yarn">

```shell
yarn gwen init
```

</TabItem>
</Tabs>

This will generate the following files and subdirectories:
```
 /project                    # Your project root
 ├── gwen.conf               # Common/default Gwen settings
 └── /gwen
     ├── .gitignore          # Git ignore file
     ├── README.md
     ├── /browsers           # Browser settings
     │   ├── chrome.conf     # - default is chrome
     │   ├── edge.conf
     │   ├── firefox.conf
     │   ├── safari.conf
     │   ├── ie.conf
     │   ├── remote.conf     # Remote web driver settings
     │   └── README.md
     ├── /env                # Environment settings
     │   ├── local.conf      # - default is local
     │   ├── dev.conf
     │   ├── test.conf
     │   └── README.md
     ├── /features           # Features and associative meta
     │   └── README.md
     ├── /meta               # Optional common/reusable meta
     │   └── README.md
     ├── /output             # Output directory
     └── /samples            # Sample features and meta
```

</TabItem>
<TabItem value="standalone">

:::caution

This option assumes that Gwen is in your system path (that is: you manually installed Gwen on your machine).

:::

Create a new directory on your machine and run the following command in it.

```shell
gwen init .
```

This will generate the following files and subdirectories:

```
 /project                # Your standalone project root
 ├── gwen.conf           # Common/default Gwen settings
 ├── README.md
 ├── .gitignore          # Git ignore file
 ├── /browsers           # Browser settings
 │   ├── chrome.conf     # - default is chrome
 │   ├── edge.conf
 │   ├── firefox.conf
 │   ├── safari.conf
 │   ├── ie.conf
 │   ├── remote.conf     # Remote web driver settings
 │   └── README.md
 ├── /env                # Environment settings
 │   ├── local.conf      # - default is local
 │   ├── dev.conf
 │   ├── test.conf
 │   └── README.md
 ├── /features           # Features and associative meta
 │   └── README.md
 ├── /meta               # Optional common/reusable meta
 │   └── README.md
 ├── /output             # Output directory
 └── /samples            # Sample features and meta
```

</TabItem>
</Tabs>

## Set default browser

Gwen is configured to use the Chrome browser by default. Perform the following to change that to another browser if you wish. 

<Tabs
  defaultValue="js"
  values={[
    {label: 'JS Project', value: 'js'},
    {label: 'Standalone Project', value: 'standalone'},
  ]}>
<TabItem value="js">

Amend the default `gwen.cli.options.config` setting in the `gwen.conf` file in your project to use the chrome, firefox, safari, edge, or ie configuration.

```json
gwen {
  ..
  cli {
    options {
      ..
      config = [
        "gwen/browsers/chrome.conf", <<-- Amend this to your preferred browser conf
        "gwen/env/local.conf"
      ]
      ..
    }
  }
  ..
}
```

</TabItem>
<TabItem value="standalone">

Amend the default `gwen.cli.options.config` setting in the `gwen.conf` file in your project to use the chrome, firefox, safari, edge, or ie configuration.

```json
gwen {
  ..
  cli {
    options {
      ..
      config = [
        "browsers/chrome.conf", <<-- Amend this to your preferred browser conf
        "env/local.conf"
      ]
      ..
    }
  }
  ..
}
```

</TabItem>
</Tabs>

## Run samples

<Tabs
  defaultValue="js"
  values={[
    {label: 'JS Project', value: 'js'},
    {label: 'Standalone Project', value: 'standalone'},
  ]}>
<TabItem value="js">

Run the following command in the root of your project to execute the sample features.

<Tabs
  defaultValue="npm"
  values={[
    {label: 'npm', value: 'npm'},
    {label: 'Yarn', value: 'yarn'},
  ]}>
<TabItem value="npm">

```shell
npm run gwen -b gwen/samples
```

</TabItem>
<TabItem value="yarn">

```shell
yarn gwen -b gwen/samples
```

</TabItem>
</Tabs>

</TabItem>
<TabItem value="standalone">

:::caution

This option assumes that Gwen is in your system path (that is: you manually installed Gwen on your machine).

:::

Run the following command in your Standalone Project to execute the sample features.

```shell
gwen -b samples
```

</TabItem>
</Tabs>

:::info Batch or REPL

The `-b` (or `--batch`) switch tells Gwen to exit immediately after executing the samples. Omitting it will open the [Gwen REPL console](https://github.com/gwen-interpreter/gwen/wiki/REPL-Console) instead after the samples have executed.

:::

See also the [HTML reports](/docs/reports/html) generated in the output directory too.

## Share project

Once you're comfortable with all of the above, you might want to push your project (or Standalone Project) to a Git repository and share it with your team. A `.gitignore` file that excludes the output directory is included. You can keep or delete the samples subdirectory (up to you).
