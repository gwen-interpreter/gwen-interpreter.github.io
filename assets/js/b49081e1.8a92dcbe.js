"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2841],{5358:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>m,frontMatter:()=>t,metadata:()=>c,toc:()=>u});var o=r(4848),l=r(8453),s=(r(8774),r(1470)),i=r(9365);r(6025);const t={title:"Docker",toc_min_heading_level:2,toc_max_heading_level:3},a="Running Gwen in Docker",c={id:"docker",title:"Docker",description:"Sometimes it may be useful to run Gwen in Docker. For example, if you want to run Gwen in a Jenkins pipeline on a build server or node agent.",source:"@site/docs/31-docker.mdx",sourceDirName:".",slug:"/docker",permalink:"/docs/docker",draft:!1,unlisted:!1,editUrl:"https://github.com/gwen-interpreter/gwen-interpreter.github.io/edit/master/docs/31-docker.mdx",tags:[],version:"current",sidebarPosition:31,frontMatter:{title:"Docker",toc_min_heading_level:2,toc_max_heading_level:3},sidebar:"tutorialSidebar",previous:{title:"Web Driver Management",permalink:"/docs/web-driver-management"},next:{title:"Jenkins",permalink:"/docs/jenkins"}},d={},u=[{value:"Get started",id:"get-started",level:2},{value:"Docker Setup",id:"docker-setup",level:2},{value:"Dockerfile",id:"dockerfile",level:3},{value:"Docker compose file",id:"docker-compose-file",level:3},{value:"Docker env file",id:"docker-env-file",level:3},{value:"Selenoid browsers file",id:"selenoid-browsers-file",level:3},{value:"Gwen settings file",id:"gwen-settings-file",level:3},{value:"Run Gwen in docker",id:"run-gwen-in-docker",level:2},{value:"Run Gwen locally with Selenoid UI",id:"run-gwen-locally-with-selenoid-ui",level:2},{value:"Video capture",id:"video-capture",level:2},{value:"Downloading Files in Chrome",id:"downloading-files-in-chrome",level:2},{value:"Mac ARM notes",id:"mac-arm-notes",level:2},{value:"Chrome or Edge crashes",id:"chrome-or-edge-crashes",level:3}];function h(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"running-gwen-in-docker",children:"Running Gwen in Docker"})}),"\n",(0,o.jsxs)(n.p,{children:["Sometimes it may be useful to run Gwen in ",(0,o.jsx)(n.a,{href:"https://www.docker.com/",children:"Docker"}),". For example, if you want to run Gwen in a ",(0,o.jsx)(n.a,{href:"/docs/jenkins",children:"Jenkins"})," pipeline on a build server or node agent.\nSetting up Gwen to run in a ",(0,o.jsx)(n.a,{href:"https://aerokube.com/selenoid/",children:"Selenoid"})," container in Docker is describe here."]}),"\n",(0,o.jsx)(n.h2,{id:"get-started",children:"Get started"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://gweninterpreter.org/docs/get-started",children:"Start a new Gwen project"})," or use an existing one."]}),"\n",(0,o.jsx)(n.h2,{id:"docker-setup",children:"Docker Setup"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Since ",(0,o.jsx)(n.a,{href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.16.0",children:"v3.16.0"}),", the ",(0,o.jsx)(n.a,{href:"/docs/cli#gwen-cli-init-options-docker",children:(0,o.jsx)(n.code,{children:"init --docker"})})," command was introduced to generate Docker and Selenoid files in your project. You will need to create the files manually if you are using an older version."]}),"\n"]}),"\n",(0,o.jsxs)(s.A,{groupId:"jstool",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"npm",value:"npm"},{label:"pnpm",value:"pnpm"}],children:[(0,o.jsxs)(i.A,{value:"yarn",children:[(0,o.jsx)(n.p,{children:"Run the following command in the root of your project to generate all the necessary Docker and Selenoid files"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"yarn gwen init --docker\n"})})]}),(0,o.jsxs)(i.A,{value:"npm",children:[(0,o.jsx)(n.p,{children:"Run the following command in the root of your project to generate all the necessary Docker and Selenoid files"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"npm run gwen init --docker\n"})})]}),(0,o.jsxs)(i.A,{value:"pnpm",children:[(0,o.jsx)(n.p,{children:"Run the following command in the root of your project to generate all the necessary Docker and Selenoid files"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"pnpm gwen init --docker\n"})})]})]}),"\n",(0,o.jsx)(n.h3,{id:"dockerfile",children:"Dockerfile"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",metastring:"{3}",children:"./project                    # Your project root\n \u2514\u2500\u2500 /gwen\n     \u2514\u2500\u2500Dockerfile           # Docker image file\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The init --docker commad will create a ",(0,o.jsx)(n.code,{children:"gwen/DockerFile"})," with the following content to build an Alpine Linux node and Yarn based image with bash and Open JDK 11 JRE installed."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"# base alpine image with node\nFROM node:21-alpine\n\n# install bash and java\nRUN apk update \\\n    && apk add bash \\\n    && apk add openjdk11-jre\n\n# Run as a non root user\nRUN addgroup -S gwen && adduser -S gwen -G gwen -u 4936\nUSER gwen\n"})}),"\n",(0,o.jsx)(n.p,{children:"Should you prefer a Red Hat Linux and Open JDK 11 based image with node and Yarn installed instead, you can change the content to this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"# base Red Hat image with open JDK 11\nFROM adoptopenjdk/openjdk11:ubi\n\n# install node & yarn\nRUN dnf module install nodejs:16 -y\nRUN npm install --global yarn\n\n# Run as a non root user\nRUN useradd -u 4936 gwen\nUSER gwen\n"})}),"\n",(0,o.jsx)(n.h3,{id:"docker-compose-file",children:"Docker compose file"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",metastring:"{4}",children:"./project                        # Your project root\n \u2514\u2500\u2500 /gwen\n     \u251c\u2500\u2500 .env                    # Docker env file\n     \u251c\u2500\u2500 Dockerfile              # Docker image file\n     \u2514\u2500\u2500 docker-compose.yml      # Docker compose YAML file\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The init --docker commad will create a ",(0,o.jsx)(n.code,{children:"gwen/docker-compose.yml"})," file with the following content to create containers for Gwen, Chrome, Firefox, and Edge web browsers, a video recorder, and a Selenoid hub that Gwen will connect to."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'services:\n  chrome:\n    image: selenoid/chrome:latest\n    networks:\n      - gwen-net\n  edge:\n    image: browsers/edge:latest\n    networks:\n      - gwen-net\n  firefox:\n    image: selenoid/firefox:latest\n    networks:\n      - gwen-net\n  video-recorder:\n    image: selenoid/video-recorder:latest-release\n    networks:\n      - gwen-net\n  selenoid:\n    image: aerokube/selenoid:latest-release\n    networks:\n      - gwen-net\n    ports:\n      - "4444:4444"\n    volumes:\n      - "$PWD/gwen/browsers:/etc/selenoid/:ro"\n      - "/var/run/docker.sock:/var/run/docker.sock"\n      - "$PWD/gwen/output/.video:/opt/selenoid/video"\n    environment:\n      - OVERRIDE_VIDEO_OUTPUT_DIR=$PWD/gwen/output/.video\n    command: ["-container-network", "gwen-net", "-video-output-dir", "/opt/selenoid/video"]\n  selenoid-ui:\n    depends_on:\n      - selenoid\n      - $GWEN_BROWSER\n    image: aerokube/selenoid-ui:latest\n    environment:\n      - GWEN_BROWSER\n    networks:\n      - gwen-net\n    ports: \n      - "8999:8999"\n    command: ["--selenoid-uri", "http://selenoid:4444", "--listen", ":8999"]\n  gwen:\n    depends_on:\n      - selenoid\n      - video-recorder\n      - $GWEN_BROWSER\n    build:\n      context: .\n      dockerfile: Dockerfile\n    environment:\n      - SELENIUM_HUB\n      - NO_COLOR\n      - GWEN_ENV\n      - GWEN_BROWSER\n      - GWEN_DRY_RUN\n      - GWEN_PARALLEL\n      - GWEN_THREADS\n      - GWEN_HEADLESS\n      - GWEN_VIDEO\n      - GWEN_WEB_VERSION\n    volumes:\n      - "$PWD:/project"\n    working_dir: /project\n    command: bash -c "yarn install && yarn gwen -b -c gwen/browsers/selenoid.conf gwen/features"\n    networks:\n      - gwen-net\n  gwen-dry-run:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    environment:\n      - NO_COLOR\n      - GWEN_WEB_VERSION\n    volumes:\n      - "$PWD:/project"\n    working_dir: /project\n    command: bash -c "yarn install && yarn gwen -bn --parallel gwen/features"\n    networks:\n      - gwen-net\nnetworks:\n  gwen-net:\n    name: gwen-net\n'})}),"\n",(0,o.jsx)(n.h3,{id:"docker-env-file",children:"Docker env file"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Since ",(0,o.jsx)(n.a,{href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.35.0",children:"v3.35.0"})]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["A ",(0,o.jsx)(n.code,{children:"gwen/.env"})," file containing the following environment variable defaults will also be generated by ",(0,o.jsx)(n.code,{children:"init --docker"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"SELENIUM_HUB=selenoid\nNO_COLOR=1\nGWEN_BROWSER=chrome\n"})}),"\n",(0,o.jsx)(n.h3,{id:"selenoid-browsers-file",children:"Selenoid browsers file"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",metastring:"{4}",children:"./project                    # Your project root\n \u2514\u2500\u2500 /gwen\n     \u2514\u2500\u2500 /browsers\n         \u2514\u2500\u2500browsers.json    # Selenoid browsers file\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The init --docker commad will create a ",(0,o.jsx)(n.code,{children:"gwen/browsers/browsers.json"})," file with the following content that will be used by Selenoid to stand up the browsers in Docker."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "chrome": {\n    "default": "latest",\n    "versions": {\n      "latest": {\n        "image": "selenoid/chrome:latest",\n        "port": "4444",\n        "path": "/"\n      }\n    }\n  },\n  "MicrosoftEdge": {\n    "default": "latest",\n    "versions": {\n      "latest": {\n        "image": "browsers/edge:latest",\n        "port": "4444",\n        "path": "/"\n      }\n    }\n  },\n  "firefox": {\n    "default": "latest",\n    "versions": {\n      "latest": {\n        "image": "selenoid/firefox:latest",\n        "port": "4444",\n        "path": "/wd/hub"\n      }\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"gwen-settings-file",children:"Gwen settings file"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",metastring:"{5}",children:"./project                    # Your project root\n \u2514\u2500\u2500 /gwen\n     \u2514\u2500\u2500 /browsers\n         \u251c\u2500\u2500browsers.json    # Selenoid browsers file\n         \u2514\u2500\u2500selenoid.conf    # Selenoid Gwen settings\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The init --docker commad will create a ",(0,o.jsx)(n.code,{children:"gwen/browsers/selenoid.conf"})," file with the following content that will be used by Gwen to connect to Selenoid."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'gwen {\n  web {\n    capabilities {\n      "selenoid:options" {\n        enableVNC = true\n        enableVideo = true\n      }\n    }\n    remote {\n      url = "http://${env.SELENIUM_HUB}:4444/wd/hub"\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"run-gwen-in-docker",children:"Run Gwen in docker"}),"\n",(0,o.jsxs)(n.p,{children:["Start your docker desktop engine (see ",(0,o.jsx)(n.a,{href:"https://docs.docker.com/get-started/",children:"getting started with Docker"})," for more info)."]}),"\n",(0,o.jsx)(n.p,{children:"Create the Gwen output directory if it does not already exist."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"mkdir -p gwen/output\n"})}),"\n",(0,o.jsx)(n.p,{children:"Run the following command to build your docker image"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"docker-compose -f gwen/docker-compose.yml build\n"})}),"\n",(0,o.jsx)(n.p,{children:"Run the following command in your project directory to launch Gwen in docker and run your features"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"docker-compose -f gwen/docker-compose.yml run gwen\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To execute features in parallel (you can pass any number of ",(0,o.jsx)(n.a,{href:"/docs/cli#environment-variables",children:"environment varaibles"})," in this manner)"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"GWEN_PARALLEL=true docker-compose -f gwen/docker-compose.yml run gwen\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To execute dry run instead (Since ",(0,o.jsx)(n.a,{href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.35.0",children:"v3.35.0"}),")"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"docker-compose -f gwen/docker-compose.yml run gwen-dry-run\n"})}),"\n",(0,o.jsx)(n.p,{children:"Tear it all down when done"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"docker-compose -f gwen/docker-compose.yml down\n"})}),"\n",(0,o.jsx)(n.h2,{id:"run-gwen-locally-with-selenoid-ui",children:"Run Gwen locally with Selenoid UI"}),"\n",(0,o.jsxs)(n.p,{children:["Make sure ",(0,o.jsx)(n.code,{children:"enableVNC = true"})," in your ",(0,o.jsx)(n.a,{href:"#gwen-settings-file",children:"selenoid settings"}),". Then run the following command to launch the ",(0,o.jsx)(n.a,{href:"https://aerokube.com/selenoid-ui/latest/",children:"Selenoid UI"})," service in Docker"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"docker-compose -f gwen/docker-compose.yml run -d --service-ports selenoid-ui\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Open ",(0,o.jsx)(n.a,{href:"http://localhost:8999",children:"http://localhost:8999"})," in a browser to check that the Selenoid UI is running and avaialable"]}),"\n",(0,o.jsx)(n.p,{children:"Run the following command to launch Gwen against your Selenoid instance in Docker. You will see browser session(s) appear in the Selenoid UI."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"SELENIUM_HUB=localhost yarn gwen -b -c gwen/browsers/selenoid.conf gwen/features\n"})}),"\n",(0,o.jsx)(n.p,{children:"Tear it all down when done"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"docker-compose -f gwen/docker-compose.yml down\n"})}),"\n",(0,o.jsx)(n.h2,{id:"video-capture",children:"Video capture"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["See also: ",(0,o.jsx)(n.a,{href:"/docs/reports/video-recordings",children:"Video recordings"})]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["If you set the ",(0,o.jsx)(n.a,{href:"/docs/cli#environment-variables",children:(0,o.jsx)(n.code,{children:"GWEN_VIDEO"})})," environment variable or the ",(0,o.jsx)(n.code,{children:"selenoid:options.enableVideo"})," capability setting to ",(0,o.jsx)(n.code,{children:"true"})," in your ",(0,o.jsx)(n.code,{children:"selenoid.conf"})," file, MP4 video recordings of each session will be attached to the feature level ",(0,o.jsx)(n.a,{href:"/docs/reports/html",children:"HTML reports"}),". Set this to ",(0,o.jsx)(n.code,{children:"false"})," if you do not wish to capture video."]}),"\n",(0,o.jsxs)(n.p,{children:["File: ",(0,o.jsx)(n.em,{children:"gwen/browsers/selenoid.conf"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:"{6}",children:'gwen {\n  web {\n    capabilities {\n      "selenoid:options" {\n        enableVNC = true\n        enableVideo = true\n      }\n    }\n    ..\n  }\n}\n'})}),"\n",(0,o.jsx)(n.admonition,{title:"video settings",type:"note",children:(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/docs/settings#gwen-video.dir",children:(0,o.jsx)(n.code,{children:"gwen-video.dir"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Should match host directory mounted to ",(0,o.jsx)(n.code,{children:"/opt/selenoid/video"})," in Selenoid video-recorder"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/docs/settings#gwen-video.timeoutSecs",children:(0,o.jsx)(n.code,{children:"gwen-video.timeoutSecs"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Time to wait for asyncronous video writes to complete (override only if default does not suffice)"}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,o.jsx)(n.admonition,{title:"Limitation",type:"caution",children:(0,o.jsxs)(n.p,{children:["Videos will not be recorded when ",(0,o.jsx)(n.a,{href:"/docs/parallel",children:"parallel execution"}),", ",(0,o.jsx)(n.a,{href:"/docs/settings#gwen-web-browser-headless",children:"headless browser"}),", or interactive (non ",(0,o.jsx)(n.a,{href:"/docs/cli#gwen-cli-options-batch",children:"--batch/-b"}),") modes are enabled."]})}),"\n",(0,o.jsx)(n.h2,{id:"downloading-files-in-chrome",children:"Downloading Files in Chrome"}),"\n",(0,o.jsxs)(n.p,{children:["Configure the following in your ",(0,o.jsx)(n.code,{children:"browsers/selenoid.conf"})," file to enable automatic file downloads for Chrome in the Selenoid/Docker container."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:"{8-30}",children:'gwen {\n  web {\n    capabilities {\n      "selenoid:options" {\n        enableVNC = true\n        enableVideo = false\n      }\n      "goog:chromeOptions" {\n        prefs {\n           download {\n             prompt_for_download = false\n             directory_upgrade = true\n             default_directory = "/home/selenium/Downloads"\n           }\n           profile {\n             default_content_settings {\n               popups = 0\n             }\n             default_content_setting_values {\n               automatic_downloads = 1\n             }\n           }\n           safebrowsing {\n             enabled = false\n           }\n           plugins: {\n             plugins_disabled = false\n           }\n         }\n      }\n    }\n    remote {\n      url = "http://${env.SELENIUM_HUB}:4444/wd/hub"\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"To access the download files, you can use the Selenoid download API through a URL as follows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"   http://${env.SELENIUM_HUB}/download/${gwen.web.sessionId}/<filename>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Where ",(0,o.jsx)(n.code,{children:"<filename>"})," is the name of the downloaded file."]}),"\n",(0,o.jsx)(n.h2,{id:"mac-arm-notes",children:"Mac ARM notes"}),"\n",(0,o.jsx)(n.h3,{id:"chrome-or-edge-crashes",children:"Chrome or Edge crashes"}),"\n",(0,o.jsx)(n.p,{children:"If you're running Chrome or Edge in a Selenoid docker container on a Mac ARM processor and encounter the following error"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"(unknown error: DevToolsActivePort file doesn't exist)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Make the following changes to the following files to use the experimanal ",(0,o.jsx)(n.a,{href:"https://github.com/seleniumhq-community/docker-seleniarm",children:"Seleniarm"})," images instead and try again."]}),"\n",(0,o.jsxs)(n.p,{children:["File: ",(0,o.jsx)(n.em,{children:"gwen/docker-compose.yml"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:"{3,7}",children:"services:\n  chrome:\n    image: seleniarm/standalone-chromium:latest\n    networks:\n      - gwen-net\n  edge:\n    image: seleniarm/standalone-chromium:latest\n    networks:\n      - gwen-net\n"})}),"\n",(0,o.jsxs)(n.p,{children:["File: ",(0,o.jsx)(n.em,{children:"gwen/browsers/browsers.json"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:"{6,16}",children:'  {\n  "chrome": {\n    "default": "latest",\n    "versions": {\n      "latest": {\n        "image": "seleniarm/standalone-chromium:latest",\n        "port": "4444",\n        "path": "/"\n      }\n    }\n  },\n  "MicrosoftEdge": {\n    "default": "latest",\n    "versions": {\n      "latest": {\n        "image": "seleniarm/standalone-chromium:latest",\n        "port": "4444",\n        "path": "/"\n      }\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"The Selenoid video recorder won't work with the experimental Seleniarm images, so you should disable video"}),"\n",(0,o.jsxs)(n.p,{children:["File: ",(0,o.jsx)(n.em,{children:"gwen/browsers/selenoid.conf"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:"{6}",children:'gwen {\n  web {\n    capabilities {\n      "selenoid:options" {\n        enableVNC = true\n        enableVideo = false\n      }\n    }\n    remote {\n      url = "http://${env.SELENIUM_HUB}:4444/wd/hub"\n    }\n  }\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},9365:(e,n,r)=>{r.d(n,{A:()=>i});r(6540);var o=r(4164);const l={tabItem:"tabItem_Ymn6"};var s=r(4848);function i(e){let{children:n,hidden:r,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,o.A)(l.tabItem,i),hidden:r,children:n})}},1470:(e,n,r)=>{r.d(n,{A:()=>k});var o=r(6540),l=r(4164),s=r(3104),i=r(6347),t=r(205),a=r(7485),c=r(1682),d=r(679);function u(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:r}=e;return(0,o.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:r,attributes:o,default:l}}=e;return{value:n,label:r,attributes:o,default:l}}))}(r);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function m(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:r}=e;const l=(0,i.W6)(),s=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,a.aZ)(s),(0,o.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(l.location.search);n.set(s,e),l.replace({...l.location,search:n.toString()})}),[s,l])]}function g(e){const{defaultValue:n,queryString:r=!1,groupId:l}=e,s=h(e),[i,a]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const o=r.find((e=>e.default))??r[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:s}))),[c,u]=p({queryString:r,groupId:l}),[g,w]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[l,s]=(0,d.Dv)(r);return[l,(0,o.useCallback)((e=>{r&&s.set(e)}),[r,s])]}({groupId:l}),f=(()=>{const e=c??g;return m({value:e,tabValues:s})?e:null})();(0,t.A)((()=>{f&&a(f)}),[f]);return{selectedValue:i,selectValue:(0,o.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);a(e),u(e),w(e)}),[u,w,s]),tabValues:s}}var w=r(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=r(4848);function x(e){let{className:n,block:r,selectedValue:o,selectValue:i,tabValues:t}=e;const a=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),d=e=>{const n=e.currentTarget,r=a.indexOf(n),l=t[r].value;l!==o&&(c(n),i(l))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=a.indexOf(e.currentTarget)+1;n=a[r]??a[0];break}case"ArrowLeft":{const r=a.indexOf(e.currentTarget)-1;n=a[r]??a[a.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":r},n),children:t.map((e=>{let{value:n,label:r,attributes:s}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,ref:e=>a.push(e),onKeyDown:u,onClick:d,...s,className:(0,l.A)("tabs__item",f.tabItem,s?.className,{"tabs__item--active":o===n}),children:r??n},n)}))})}function b(e){let{lazy:n,children:r,selectedValue:s}=e;const i=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===s));return e?(0,o.cloneElement)(e,{className:(0,l.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function v(e){const n=g(e);return(0,j.jsxs)("div",{className:(0,l.A)("tabs-container",f.tabList),children:[(0,j.jsx)(x,{...n,...e}),(0,j.jsx)(b,{...n,...e})]})}function k(e){const n=(0,w.A)();return(0,j.jsx)(v,{...e,children:u(e.children)},String(n))}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>t});var o=r(6540);const l={},s=o.createContext(l);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);