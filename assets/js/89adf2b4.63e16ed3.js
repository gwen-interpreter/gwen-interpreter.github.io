"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8356],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return c}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(a),c=r,f=m["".concat(s,".").concat(c)]||m[c]||d[c]||l;return a?n.createElement(f,i(i({ref:t},p),{},{components:a})):n.createElement(f,i({ref:t},p))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5162:function(e,t,a){a.d(t,{Z:function(){return i}});var n=a(7294),r=a(4334),l="tabItem_Ymn6";function i(e){var t=e.children,a=e.hidden,i=e.className;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:a},t)}},4866:function(e,t,a){a.d(t,{Z:function(){return y}});var n=a(3117),r=a(7294),l=a(4334),i=a(6775),o=a(1980),s=a(7392),u=a(12);function p(e){return function(e){var t,a;return null!=(t=null==(a=r.Children.map(e,(function(e){if(!e||(0,r.isValidElement)(e)&&(t=e.props)&&"object"==typeof t&&"value"in t)return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:a.filter(Boolean))?t:[]}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function d(e){var t=e.values,a=e.children;return(0,r.useMemo)((function(){var e=null!=t?t:p(a);return function(e){var t=(0,s.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,a])}function m(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function c(e){var t=e.queryString,a=void 0!==t&&t,n=e.groupId,l=(0,i.k6)(),s=function(e){var t=e.queryString,a=void 0!==t&&t,n=e.groupId;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=n?n:null}({queryString:a,groupId:n});return[(0,o._X)(s),(0,r.useCallback)((function(e){if(s){var t=new URLSearchParams(l.location.search);t.set(s,e),l.replace(Object.assign({},l.location,{search:t.toString()}))}}),[s,l])]}function f(e){var t,a,n,l,i=e.defaultValue,o=e.queryString,s=void 0!==o&&o,p=e.groupId,f=d(e),g=(0,r.useState)((function(){return function(e){var t,a=e.defaultValue,n=e.tabValues;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!m({value:a,tabValues:n}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+a+'" but none of its children has the corresponding value. Available values are: '+n.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return a}var r=null!=(t=n.find((function(e){return e.default})))?t:n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:i,tabValues:f})})),h=g[0],k=g[1],b=c({queryString:s,groupId:p}),v=b[0],N=b[1],w=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:p}.groupId),a=(0,u.Nk)(t),n=a[0],l=a[1],[n,(0,r.useCallback)((function(e){t&&l.set(e)}),[t,l])]),y=w[0],S=w[1],x=function(){var e=null!=v?v:y;return m({value:e,tabValues:f})?e:null}();return(0,r.useLayoutEffect)((function(){x&&k(x)}),[x]),{selectedValue:h,selectValue:(0,r.useCallback)((function(e){if(!m({value:e,tabValues:f}))throw new Error("Can't select invalid tab value="+e);k(e),N(e),S(e)}),[N,S,f]),tabValues:f}}var g=a(2466),h=a(2389),k="tabList__CuJ",b="tabItem_LNqP";function v(e){var t=e.className,a=e.block,i=e.selectedValue,o=e.selectValue,s=e.tabValues,u=[],p=(0,g.o5)().blockElementScrollPositionUntilNextRender,d=function(e){var t=e.currentTarget,a=u.indexOf(t),n=s[a].value;n!==i&&(p(t),o(n))},m=function(e){var t,a=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":var n,r=u.indexOf(e.currentTarget)+1;a=null!=(n=u[r])?n:u[0];break;case"ArrowLeft":var l,i=u.indexOf(e.currentTarget)-1;a=null!=(l=u[i])?l:u[u.length-1]}null==(t=a)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},t)},s.map((function(e){var t=e.value,a=e.label,o=e.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:function(e){return u.push(e)},onKeyDown:m,onClick:d},o,{className:(0,l.Z)("tabs__item",b,null==o?void 0:o.className,{"tabs__item--active":i===t})}),null!=a?a:t)})))}function N(e){var t=e.lazy,a=e.children,n=e.selectedValue,l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){var i=l.find((function(e){return e.props.value===n}));return i?(0,r.cloneElement)(i,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n})})))}function w(e){var t=f(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",k)},r.createElement(v,(0,n.Z)({},e,t)),r.createElement(N,(0,n.Z)({},e,t)))}function y(e){var t=(0,h.Z)();return r.createElement(w,(0,n.Z)({key:String(t)},e))}},4308:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return d},default:function(){return h},frontMatter:function(){return p},metadata:function(){return m},toc:function(){return f}});var n=a(3117),r=a(102),l=(a(7294),a(3905)),i=a(9960),o=a(4866),s=a(5162),u=(a(4996),["components"]),p={toc_min_heading_level:2,toc_max_heading_level:3},d="Data Feeds",m={unversionedId:"data-feeds",id:"data-feeds",title:"Data Feeds",description:"CSV data feeds",source:"@site/docs/19-data-feeds.mdx",sourceDirName:".",slug:"/data-feeds",permalink:"/docs/data-feeds",draft:!1,editUrl:"https://github.com/gwen-interpreter/gwen-interpreter.github.io/edit/master/docs/19-data-feeds.mdx",tags:[],version:"current",sidebarPosition:19,frontMatter:{toc_min_heading_level:2,toc_max_heading_level:3},sidebar:"tutorialSidebar",previous:{title:"Data Tables",permalink:"/docs/data-tables"},next:{title:"Try Steps",permalink:"/docs/try-steps"}},c={},f=[{value:"CSV data feeds",id:"csv-data-feeds",level:2},{value:"Examples",id:"examples",level:4},{value:"JSON data feeds",id:"json-data-feeds",level:2},{value:"Examples",id:"examples-1",level:4},{value:"@Examples annotation",id:"examples-annotation",level:2},{value:"CSV Data",id:"csv-data",level:3},{value:"JSON Data",id:"json-data",level:3},{value:"Where filter",id:"where-filter",level:3},{value:"Name prefix",id:"name-prefix",level:3},{value:"Required flag",id:"required-flag",level:3}],g={toc:f};function h(e){var t=e.components,a=(0,r.Z)(e,u);return(0,l.kt)("wrapper",(0,n.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"data-feeds"},"Data Feeds"),(0,l.kt)("h2",{id:"csv-data-feeds"},"CSV data feeds"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Since ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v1.0.0"},"v1.0.0"))),(0,l.kt)("p",null,"CSV data files can be passed into the interpreter to perform feature execution over multiple data sets. The first row in a CSV data file must be a list of column names for the contained data that follows. The values in each record will be bound to attributes in the feature scope having these same names. Feature steps can reference the bound data using these names."),(0,l.kt)("p",null,"Say you have a ",(0,l.kt)("inlineCode",{parentName:"p"},"users.csv")," file containing following user records."),(0,l.kt)("admonition",{title:"CSV",type:"note"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("em",{parentName:"p"},"File: data/users.csv")),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-text"},"name,surname,job\nGwen,Stefani,Pop Singer\nGwyneth,Paltrow,Actress\nGwen,Cooper,Torchwood Agent\n"))),(0,l.kt)("p",null,"The first row in this file specifies a comma separated list of column names. The remaining rows specify the comma separated lists of values for each record. Now say you wanted to submit the details for each user to a web page through a single ",(0,l.kt)("inlineCode",{parentName:"p"},"submit-user.feature")," file that accepts all the user data as input one at a time. You can do this in the feature by referencing CSV data values by their column names as follows:"),(0,l.kt)("admonition",{title:"Feature",type:"note"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("em",{parentName:"p"},"File: features/submit-user.feature")),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-gherkin"},'Feature: Submit user ${name} ${surname}\n\n  Scenario: submit user details\n    Given I navigate to the user details page\n     When I type name in the first name field\n      And I type surname in the last name field\n      And I type job in the job field\n      And I click the save button\n     Then the alert msg should be "User ${name} saved"\n')),(0,l.kt)("p",{parentName:"admonition"},"Note: Interpolation of CSV fields ",(0,l.kt)("inlineCode",{parentName:"p"},"${name} ${surname}")," in the feature name and description is supported since ",(0,l.kt)(i.Z,{to:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.12.1",mdxType:"Link"},"v3.12.1"))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"The current CSV record number (starting at 1) is available as an implicit attribute named ",(0,l.kt)("inlineCode",{parentName:"p"},"data record number")," and can be accessed by reference or ",(0,l.kt)("a",{parentName:"p",href:"/docs/string-interpolation"},"interpolation"),"."),(0,l.kt)("p",{parentName:"blockquote"},"Or since Since ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.47.0"},"v3.48.0"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",null,(0,l.kt)("code",null,"data.record.number")," = current record number starting at 1"),(0,l.kt)("li",null,(0,l.kt)("code",null,"data.record.index")," = current record index starting at 0"))),(0,l.kt)("p",null,"You can execute this feature for all users in the CSV file by launching Gwen with the ",(0,l.kt)("a",{parentName:"p",href:"/docs/cli#gwen-cli-options-input-data"},(0,l.kt)("inlineCode",{parentName:"a"},"-i|--input-data"))," CLI option."),(0,l.kt)("h4",{id:"examples"},"Examples"),(0,l.kt)(o.Z,{groupId:"setup",defaultValue:"project",values:[{label:"Project",value:"project"},{label:"Standalone",value:"standalone"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"project",mdxType:"TabItem"},(0,l.kt)(o.Z,{groupId:"jstool",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"npm",value:"npm"},{label:"pnpm",value:"pnpm"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"yarn",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"yarn gwen -b -i gwen/data/users.csv gwen/features/submit-user.feature\n")),(0,l.kt)("p",null,"  or "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"yarn gwen -b --input-data gwen/data/users.csv gwen/features/submit-user.feature\n"))),(0,l.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"npm run gwen -- -b -i gwen/data/users.csv gwen/features/submit-user.feature\n")),(0,l.kt)("p",null,"  or "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"npm run gwen -- -b --input-data gwen/data/users.csv gwen/features/submit-user.feature\n"))),(0,l.kt)(s.Z,{value:"pnpm",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"pnpm gwen -b -i gwen/data/users.csv gwen/features/submit-user.feature\n")),(0,l.kt)("p",null,"  or "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"pnpm gwen -b --input-data gwen/data/users.csv gwen/features/submit-user.feature\n"))))),(0,l.kt)(s.Z,{value:"standalone",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"gwen -b -i data/users.csv features/submit-user.feature\n")),(0,l.kt)("p",null,"  or "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"gwen -b --input-data data/users.csv features/submit-user.feature\n")))),(0,l.kt)("p",null,"Gwen will read in the CSV file, and for each record will:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Bind the data to the feature"),(0,l.kt)("li",{parentName:"ul"},"And execute the feature")),(0,l.kt)("p",null,"A feature detail report will be generated for each data record. If you specify the ",(0,l.kt)("a",{parentName:"p",href:"/docs/cli#gwen-cli-options-parallel"},(0,l.kt)("inlineCode",{parentName:"a"},"--parallel"))," CLI option, the feature will execute all records in parallel."),(0,l.kt)("h2",{id:"json-data-feeds"},"JSON data feeds"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Since ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.47.0"},"v3.47.0"))),(0,l.kt)("p",null,"JSON data files can be passed into the interpreter to perform feature execution over multiple data sets. The values in each record will be bound to attributes in the feature scope by their names. Feature steps can reference the bound data using these names."),(0,l.kt)("p",null,"Say you have a ",(0,l.kt)("inlineCode",{parentName:"p"},"users.json")," file containing following user records."),(0,l.kt)("admonition",{title:"JSON",type:"note"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("em",{parentName:"p"},"File: data/users.json")),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-json"},'[\n  { "name": "Gwen",    "surname": "Stefani", "job": "Pop Singer"      },\n  { "name": "Gwyneth", "surname": "Paltrow", "job": "Actress"         },\n  { "name": "Gwen",    "surname": "Cooper",  "job": "Torchwood Agent" }\n]\n'))),(0,l.kt)("p",null,"Now say you wanted to submit the details for each user to a web page through a single ",(0,l.kt)("inlineCode",{parentName:"p"},"submit-user.feature")," file that accepts all the user data as input one at a time. You can do this in the feature by referencing JSON data values by their names as follows:"),(0,l.kt)("admonition",{title:"Feature",type:"note"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("em",{parentName:"p"},"File: features/submit-user.feature")),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-gherkin"},'Feature: Submit user ${name} ${surname}\n\n  Scenario: submit user details\n    Given I navigate to the user details page\n     When I type name in the first name field\n      And I type surname in the last name field\n      And I type job in the job field\n      And I click the save button\n     Then the alert msg should be "User ${name} saved"\n')),(0,l.kt)("p",{parentName:"admonition"},"Note: Interpolation of JSON fields ",(0,l.kt)("inlineCode",{parentName:"p"},"${name} ${surname}")," is supported in the feature name and description too.")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"The current JSON record number (starting at 1) is available as an implicit attribute named ",(0,l.kt)("inlineCode",{parentName:"p"},"data record number")," and can be accessed by reference or ",(0,l.kt)("a",{parentName:"p",href:"/docs/string-interpolation"},"interpolation"),"."),(0,l.kt)("p",{parentName:"blockquote"},"Or since Since ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.47.0"},"v3.48.0"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",null,(0,l.kt)("code",null,"data.record.number")," = current record number starting at 1"),(0,l.kt)("li",null,(0,l.kt)("code",null,"data.record.index")," = current record index starting at 0"))),(0,l.kt)("p",null,"You can execute this feature for all users in the JSON file by launching Gwen with the ",(0,l.kt)("a",{parentName:"p",href:"/docs/cli#gwen-cli-options-input-data"},(0,l.kt)("inlineCode",{parentName:"a"},"-i|--input-data"))," CLI option."),(0,l.kt)("h4",{id:"examples-1"},"Examples"),(0,l.kt)(o.Z,{groupId:"setup",defaultValue:"project",values:[{label:"Project",value:"project"},{label:"Standalone",value:"standalone"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"project",mdxType:"TabItem"},(0,l.kt)(o.Z,{groupId:"jstool",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"npm",value:"npm"},{label:"pnpm",value:"pnpm"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"yarn",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"yarn gwen -b -i gwen/data/users.json gwen/features/submit-user.feature\n")),(0,l.kt)("p",null,"  or "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"yarn gwen -b --input-data gwen/data/users.json gwen/features/submit-user.feature\n"))),(0,l.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"npm run gwen -- -b -i gwen/data/users.json gwen/features/submit-user.feature\n")),(0,l.kt)("p",null,"  or "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"npm run gwen -- -b --input-data gwen/data/users.json gwen/features/submit-user.feature\n"))),(0,l.kt)(s.Z,{value:"pnpm",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"pnpm gwen -b -i gwen/data/users.json gwen/features/submit-user.feature\n")),(0,l.kt)("p",null,"  or "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"pnpm gwen -b --input-data gwen/data/users.json gwen/features/submit-user.feature\n"))))),(0,l.kt)(s.Z,{value:"standalone",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"gwen -b -i data/users.json features/submit-user.feature\n")),(0,l.kt)("p",null,"  or "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"gwen -b --input-data data/users.json features/submit-user.feature\n")))),(0,l.kt)("p",null,"Gwen will read in the JSON file, and for each record will:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Bind the data to the feature"),(0,l.kt)("li",{parentName:"ul"},"And execute the feature")),(0,l.kt)("p",null,"A feature detail report will be generated for each data record. If you specify the ",(0,l.kt)("a",{parentName:"p",href:"/docs/cli#gwen-cli-options-parallel"},(0,l.kt)("inlineCode",{parentName:"a"},"--parallel"))," CLI option, the feature will execute all records in parallel."),(0,l.kt)("h2",{id:"examples-annotation"},"@Examples annotation"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Since ",(0,l.kt)(i.Z,{to:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v2.10.0",mdxType:"Link"},"v2.10.0"))),(0,l.kt)("p",null,"Consider the following scenario outline with an examples table"),(0,l.kt)("admonition",{title:"Example",type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Scenario outline with inlined data"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-gherkin"},'  Scenario Outline: I load items from data files\n    When I add a <Status> "<Item>" item\n    \n    Examples:\n      | Item         | Status  |\n      | Walk the dog | pending |\n      | Get the milk | done    |\n      | Feed the cat | pending |\n'))),(0,l.kt)("h3",{id:"csv-data"},"CSV Data"),(0,l.kt)("p",null,"The data table in the examples clause can be externalised to a CSV file and imported using the ",(0,l.kt)("inlineCode",{parentName:"p"},"@Examples")," annotation as follows:"),(0,l.kt)("admonition",{title:"Example",type:"note"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("em",{parentName:"p"},"CSV File: data/items.csv")),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Item,Status\nWalk the dog,pending\nGet the milk,done\nTake out trash,pending\n")),(0,l.kt)("p",{parentName:"admonition"},"Scenario outline with externalised CSV data"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{1}","{1}":!0},'  @Examples("data/items.csv")\n  Scenario Outline: I load items from data files\n    When I add a <Status> "<Item>" item\n')),(0,l.kt)("p",{parentName:"admonition"},"This will resolve to an identical outline when expanded at runtime:"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-gherkin"},'  Scenario Outline: I load items from data files\n    When I add a <Status> "<Item>" item\n    \n    Examples: Data file: data/items.csv\n      | Item         | Status  |\n      | Walk the dog | pending |\n      | Get the milk | done    |\n      | Feed the cat | pending |\n'))),(0,l.kt)("h3",{id:"json-data"},"JSON Data"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Since ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.47.0"},"v3.47.0"))),(0,l.kt)("p",null,"The data table in the examples clause can be externalised to a JSON file and imported using the ",(0,l.kt)("inlineCode",{parentName:"p"},"@Examples")," annotation as follows:"),(0,l.kt)("admonition",{title:"Example",type:"note"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("em",{parentName:"p"},"JSON File: data/items.json")),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-json"},'[\n  { "Item": "Walk the dog",   "Status": "pending" },\n  { "Item": "Get the milk",   "Status": "done" },\n  { "Item": "Take out trash", "Status": "pending" }\n]\n')),(0,l.kt)("p",{parentName:"admonition"},"Scenario outline with externalised JSON data"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{1}","{1}":!0},'  @Examples("data/items.json")\n  Scenario Outline: I load items from data files\n    When I add a <Status> "<Item>" item\n')),(0,l.kt)("p",{parentName:"admonition"},"This will resolve to an identical outline when expanded at runtime:"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-gherkin"},'  Scenario Outline: I load items from data files\n    When I add a <Status> "<Item>" item\n    \n    Examples: Data file: data/items.json\n      | Item         | Status  |\n      | Walk the dog | pending |\n      | Get the milk | done    |\n      | Feed the cat | pending |\n'))),(0,l.kt)("h3",{id:"where-filter"},"Where filter"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Since ",(0,l.kt)(i.Z,{to:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.27.0",mdxType:"Link"},"v3.27.0"))),(0,l.kt)("p",null,"The data can also be filtered using a ",(0,l.kt)("inlineCode",{parentName:"p"},"where")," JavaScript expression filter. For example, to get all the records where the data in the ",(0,l.kt)("inlineCode",{parentName:"p"},"Status")," column matches ",(0,l.kt)("inlineCode",{parentName:"p"},"pending"),":"),(0,l.kt)("admonition",{title:"Example",type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Scenario outline with externalised and filtered data"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{1}","{1}":!0},'  @Examples(file="data/items.csv",where="\'${Status}\'==\'pending\'")\n  Scenario Outline: I load items from data files\n    When I add a <Status> "<Item>" item\n')),(0,l.kt)("p",{parentName:"admonition"},"Will resolve to the following containing ",(0,l.kt)("inlineCode",{parentName:"p"},"pending")," Status records only:"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{6,7}","{6,7}":!0},"  Scenario Outline: I load items from data files\n    When I add a <Status> \"<Item>\" item\n    \n    Examples: Data file: data/items.csv, where: '${Status}'=='pending'\n      | Item         | Status  |\n      | Walk the dog | pending |\n      | Feed the cat | pending |\n"))),(0,l.kt)("p",null,"String interpolation syntax can also be used to reference a value in the data record or current scope. For example, to get all the records where the ",(0,l.kt)("inlineCode",{parentName:"p"},"Status")," matches the value bound to an in-memory attribute named ",(0,l.kt)("inlineCode",{parentName:"p"},"SelectedStatus"),":"),(0,l.kt)("admonition",{title:"Example",type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Scenario outline with externalised and filtered data"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{1}","{1}":!0},'  @Examples(file="data/items.csv",where="\'${Status}\'==\'${SelectedStatus}\'")\n  Scenario Outline: I load items from data files\n    When I add a <Status> "<Item>" item\n'))),(0,l.kt)("p",null,"Since ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.47.0"},"v3.47.0"),", a JSON data file can also be used."),(0,l.kt)("h3",{id:"name-prefix"},"Name prefix"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Since ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.27.0"},"v3.27.0"))),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},'prefix="string"')," attribute can be added to prepend a prefix to each column name in the CSV heaader record. This is useful for avoiding any potential name clashes with existing data in the current scope."),(0,l.kt)("admonition",{title:"Example",type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Scenario outline sourced from CSV file having column names ",(0,l.kt)("inlineCode",{parentName:"p"},"Status, Item")),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{1}","{1}":!0},'  @Examples(file="data/items.csv",prefix="todo.",where="\'${todo.Status}\'==\'pending\'")\n  Scenario Outline: I load items from data files\n    When I add a <todo.Status> "<todo.Item>" item\n')),(0,l.kt)("p",{parentName:"admonition"},"Will result in the column names ",(0,l.kt)("inlineCode",{parentName:"p"},"todo.Status, todo.Item")," when ",(0,l.kt)("inlineCode",{parentName:"p"},"todo.")," prefix is applied at runtime"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{5}","{5}":!0},"  Scenario Outline: I load items from data files\n    When I add a <todo.Status> \"<todo.Item>\" item\n    \n    Examples: Data file: data/items.csv, prefix: todo., where: '${todo.Status}'=='pending'\n      | todo.Item    | todo.Status |\n      | Walk the dog | pending     |\n      | Feed the cat | pending     |\n"))),(0,l.kt)("p",null,"Since ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.47.0"},"v3.47.0"),", a JSON data file can also be used."),(0,l.kt)("h3",{id:"required-flag"},"Required flag"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Since ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.20.0"},"v3.20.0"))),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"required=true")," attribute can be added to raise an error if no data is returned by the ",(0,l.kt)("inlineCode",{parentName:"p"},"where")," clause filter."),(0,l.kt)("admonition",{title:"Example",type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Scenario outline which raises an error if externalised and filtered data is empty"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{1}","{1}":!0},'  @Examples(file="data/items.csv",where="\'${Status}\'==\'${SelectedStatus}\'",required=true)\n  Scenario Outline: I load items from data files\n    When I add a <Status> "<Item>" item\n'))),(0,l.kt)("p",null,"Since ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.47.0"},"v3.47.0"),", a JSON data file can also be used."))}h.isMDXComponent=!0}}]);