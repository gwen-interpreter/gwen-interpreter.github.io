"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[721],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(t),m=a,k=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return t?r.createElement(k,l(l({ref:n},u),{},{components:t})):r.createElement(k,l({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:function(e,n,t){t.d(n,{Z:function(){return l}});var r=t(7294),a=t(4334),o="tabItem_Ymn6";function l(e){var n=e.children,t=e.hidden,l=e.className;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,l),hidden:t},n)}},4866:function(e,n,t){t.d(n,{Z:function(){return y}});var r=t(3117),a=t(7294),o=t(4334),l=t(6775),i=t(1980),s=t(7392),c=t(12);function u(e){return function(e){return a.Children.map(e,(function(e){if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')}))}(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}function d(e){var n=e.values,t=e.children;return(0,a.useMemo)((function(){var e=null!=n?n:u(t);return function(e){var n=(0,s.l)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function p(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function m(e){var n=e.queryString,t=void 0!==n&&n,r=e.groupId,o=(0,l.k6)(),s=function(e){var n=e.queryString,t=void 0!==n&&n,r=e.groupId;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=r?r:null}({queryString:t,groupId:r});return[(0,i._X)(s),(0,a.useCallback)((function(e){if(s){var n=new URLSearchParams(o.location.search);n.set(s,e),o.replace(Object.assign({},o.location,{search:n.toString()}))}}),[s,o])]}function k(e){var n,t,r,o,l=e.defaultValue,i=e.queryString,s=void 0!==i&&i,u=e.groupId,k=d(e),g=(0,a.useState)((function(){return function(e){var n,t=e.defaultValue,r=e.tabValues;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:r}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+r.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}var a=null!=(n=r.find((function(e){return e.default})))?n:r[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:l,tabValues:k})})),f=g[0],h=g[1],w=m({queryString:s,groupId:u}),v=w[0],b=w[1],N=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:u}.groupId),t=(0,c.Nk)(n),r=t[0],o=t[1],[r,(0,a.useCallback)((function(e){n&&o.set(e)}),[n,o])]),y=N[0],E=N[1],S=function(){var e=null!=v?v:y;return p({value:e,tabValues:k})?e:null}();return(0,a.useLayoutEffect)((function(){S&&h(S)}),[S]),{selectedValue:f,selectValue:(0,a.useCallback)((function(e){if(!p({value:e,tabValues:k}))throw new Error("Can't select invalid tab value="+e);h(e),b(e),E(e)}),[b,E,k]),tabValues:k}}var g=t(2466),f=t(2389),h="tabList__CuJ",w="tabItem_LNqP";function v(e){var n=e.className,t=e.block,l=e.selectedValue,i=e.selectValue,s=e.tabValues,c=[],u=(0,g.o5)().blockElementScrollPositionUntilNextRender,d=function(e){var n=e.currentTarget,t=c.indexOf(n),r=s[t].value;r!==l&&(u(n),i(r))},p=function(e){var n,t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":var r,a=c.indexOf(e.currentTarget)+1;t=null!=(r=c[a])?r:c[0];break;case"ArrowLeft":var o,l=c.indexOf(e.currentTarget)-1;t=null!=(o=c[l])?o:c[c.length-1]}null==(n=t)||n.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},s.map((function(e){var n=e.value,t=e.label,i=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:function(e){return c.push(e)},onKeyDown:p,onClick:d},i,{className:(0,o.Z)("tabs__item",w,null==i?void 0:i.className,{"tabs__item--active":l===n})}),null!=t?t:n)})))}function b(e){var n=e.lazy,t=e.children,r=e.selectedValue;if(t=Array.isArray(t)?t:[t],n){var o=t.find((function(e){return e.props.value===r}));return o?(0,a.cloneElement)(o,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},t.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})})))}function N(e){var n=k(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",h)},a.createElement(v,(0,r.Z)({},e,n)),a.createElement(b,(0,r.Z)({},e,n)))}function y(e){var n=(0,f.Z)();return a.createElement(N,(0,r.Z)({key:String(n)},e))}},3350:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return m}});var r=t(3117),a=t(102),o=(t(7294),t(3905)),l=(t(9960),t(4866)),i=t(5162),s=(t(4996),["components"]),c={title:"Docker",toc_min_heading_level:2,toc_max_heading_level:3},u="Running Gwen in Docker",d={unversionedId:"docker",id:"docker",title:"Docker",description:"Sometimes it may be useful to run Gwen in Docker. For example, if you want to run Gwen in a Jenkins pipeline on a build server or node agent.",source:"@site/docs/12-docker.mdx",sourceDirName:".",slug:"/docker",permalink:"/docs/docker",draft:!1,editUrl:"https://github.com/gwen-interpreter/gwen-interpreter.github.io/edit/master/docs/12-docker.mdx",tags:[],version:"current",sidebarPosition:12,frontMatter:{title:"Docker",toc_min_heading_level:2,toc_max_heading_level:3},sidebar:"tutorialSidebar",previous:{title:"Web Driver Management",permalink:"/docs/advanced/web-driver-management"},next:{title:"Jenkins",permalink:"/docs/jenkins"}},p={},m=[{value:"Get started",id:"get-started",level:2},{value:"Docker Setup",id:"docker-setup",level:2},{value:"Dockerfile",id:"dockerfile",level:3},{value:"Docker compose file",id:"docker-compose-file",level:3},{value:"Docker env file",id:"docker-env-file",level:3},{value:"Selenoid browsers file",id:"selenoid-browsers-file",level:3},{value:"Gwen settings file",id:"gwen-settings-file",level:3},{value:"Package JSON script",id:"package-json-script",level:2},{value:"Run Gwen in docker",id:"run-gwen-in-docker",level:2},{value:"Run Gwen locally with Selenoid UI",id:"run-gwen-locally-with-selenoid-ui",level:2},{value:"Video capture",id:"video-capture",level:2},{value:"ARM Mac notes",id:"arm-mac-notes",level:2},{value:"Chrome or Edge crashes",id:"chrome-or-edge-crashes",level:3}],k={toc:m};function g(e){var n=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"running-gwen-in-docker"},"Running Gwen in Docker"),(0,o.kt)("p",null,"Sometimes it may be useful to run Gwen in ",(0,o.kt)("a",{parentName:"p",href:"https://www.docker.com/"},"Docker"),". For example, if you want to run Gwen in a ",(0,o.kt)("a",{parentName:"p",href:"/docs/jenkins"},"Jenkins")," pipeline on a build server or node agent.\nSetting up Gwen to run in a ",(0,o.kt)("a",{parentName:"p",href:"https://aerokube.com/selenoid/"},"Selenoid")," container in Docker is describe here."),(0,o.kt)("h2",{id:"get-started"},"Get started"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://gweninterpreter.org/docs/get-started"},"Start a new Gwen project")," or use an existing one."),(0,o.kt)("h2",{id:"docker-setup"},"Docker Setup"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Since ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.16.0"},"v3.16.0"),", the ",(0,o.kt)("a",{parentName:"p",href:"/docs/cli#gwen-cli-options-init-docker"},(0,o.kt)("inlineCode",{parentName:"a"},"init --docker"))," command was introduced to generate Docker and Selenoid files in your project. You will need to create the files manually if you are using an older version.")),(0,o.kt)(l.Z,{groupId:"jstool",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"npm",value:"npm"},{label:"pnpm",value:"pnpm"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"yarn",mdxType:"TabItem"},(0,o.kt)("p",null,"Run the following command in the root of your project to generate all the necessary Docker and Selenoid files"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"yarn gwen init --docker\n"))),(0,o.kt)(i.Z,{value:"npm",mdxType:"TabItem"},(0,o.kt)("p",null,"Run the following command in the root of your project to generate all the necessary Docker and Selenoid files"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm run gwen init --docker\n"))),(0,o.kt)(i.Z,{value:"pnpm",mdxType:"TabItem"},(0,o.kt)("p",null,"Run the following command in the root of your project to generate all the necessary Docker and Selenoid files"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"pnpm gwen init --docker\n")))),(0,o.kt)("h3",{id:"dockerfile"},"Dockerfile"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:"{3}","{3}":!0},"./project                    # Your project root\n \u2514\u2500\u2500 /gwen\n     \u2514\u2500\u2500Dockerfile           # Docker image file\n")),(0,o.kt)("p",null,"The init --docker commad will create a ",(0,o.kt)("inlineCode",{parentName:"p"},"gwen/DockerFile")," with the following content to build an Alpine Linux node and Yarn based image with bash and Open JDK 8 JRE installed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# base alpine image with node\nFROM node:17-alpine\n\n# install bash and java\nRUN apk update \\\n    && apk add bash \\\n    && apk add openjdk8-jre\n\n# Run as a non root user\nRUN addgroup -S gwen && adduser -S gwen -G gwen -u 4936\nUSER gwen\n")),(0,o.kt)("p",null,"Should you prefer a Red Hat Linux and Open JDK 8 based image with node and Yarn installed instead, you can change the content to this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# base Red Hat image with open JDK 8\nFROM adoptopenjdk/openjdk8:ubi\n\n# install node & yarn\nRUN dnf module install nodejs:16 -y\nRUN npm install --global yarn\n\n# Run as a non root user\nRUN useradd -u 4936 gwen\nUSER gwen\n")),(0,o.kt)("h3",{id:"docker-compose-file"},"Docker compose file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:"{4}","{4}":!0},"./project                        # Your project root\n \u2514\u2500\u2500 /gwen\n     \u251c\u2500\u2500 .env                    # Docker env file\n     \u251c\u2500\u2500 Dockerfile              # Docker image file\n     \u2514\u2500\u2500 docker-compose.yml      # Docker compose YAML file\n")),(0,o.kt)("p",null,"The init --docker commad will create a ",(0,o.kt)("inlineCode",{parentName:"p"},"gwen/docker-compose.yml")," file with the following content to create containers for Gwen, Chrome, Firefox, and Edge web browsers, a video recorder, and a Selenoid hub that Gwen will connect to."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'version: \'3.5\'\nservices:\n  chrome:\n    image: selenoid/chrome:latest\n    networks:\n      - gwen-net\n  edge:\n    image: browsers/edge:latest\n    networks:\n      - gwen-net\n  firefox:\n    image: selenoid/firefox:latest\n    networks:\n      - gwen-net\n  video-recorder:\n    image: selenoid/video-recorder:latest-release\n    networks:\n      - gwen-net\n  selenoid:\n    image: aerokube/selenoid:latest-release\n    networks:\n      - gwen-net\n    ports:\n      - "4444:4444"\n    volumes:\n      - "$PWD/gwen/browsers:/etc/selenoid/:ro"\n      - "/var/run/docker.sock:/var/run/docker.sock"\n      - "$PWD/gwen/output/.video:/opt/selenoid/video"\n    environment:\n      - OVERRIDE_VIDEO_OUTPUT_DIR=$PWD/gwen/output/.video\n    command: ["-container-network", "gwen-net", "-video-output-dir", "/opt/selenoid/video"]\n  selenoid-ui:\n    depends_on:\n      - selenoid\n      - $GWEN_BROWSER\n    image: aerokube/selenoid-ui:latest\n    environment:\n      - GWEN_BROWSER\n    networks:\n      - gwen-net\n    ports: \n      - "8999:8999"\n    command: ["--selenoid-uri", "http://selenoid:4444", "--listen", ":8999"]\n  gwen:\n    depends_on:\n      - selenoid\n      - video-recorder\n      - $GWEN_BROWSER\n    build:\n      context: .\n      dockerfile: Dockerfile\n    environment:\n      - SELENIUM_HUB=selenoid\n      - NO_COLOR=1\n      - GWEN_ENV\n      - GWEN_BROWSER\n      - GWEN_DRY_RUN\n      - GWEN_PARALLEL\n      - GWEN_THREADS\n      - GWEN_HEADLESS\n      - GWEN_VIDEO\n    volumes:\n      - "$PWD:/project"\n    working_dir: /project\n    command: bash -c "yarn install && yarn gwen:selenoid -b"\n    networks:\n      - gwen-net\n  gwen-dry-run:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    environment:\n      - NO_COLOR=1\n    volumes:\n      - "$PWD:/project"\n    working_dir: /project\n    command: bash -c "yarn install && yarn gwen -bn --parallel gwen/features"\n    networks:\n      - gwen-net\nnetworks:\n  gwen-net:\n    name: gwen-net\n')),(0,o.kt)("h3",{id:"docker-env-file"},"Docker env file"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Since ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.35.0"},"v3.35.0"))),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"gwen/.env")," file containing the following environment variable defaults will also be generated by ",(0,o.kt)("inlineCode",{parentName:"p"},"init --docker"),".\nThis sets the default browser to chrome via the ",(0,o.kt)("a",{parentName:"p",href:"/docs/cli#environment-variables"},"GWEN_BROWSER")," variable. You can change it to another browser if you wish."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"GWEN_BROWSER=chrome\n")),(0,o.kt)("h3",{id:"selenoid-browsers-file"},"Selenoid browsers file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:"{4}","{4}":!0},"./project                    # Your project root\n \u2514\u2500\u2500 /gwen\n     \u2514\u2500\u2500 /browsers\n         \u2514\u2500\u2500browsers.json    # Selenoid browsers file\n")),(0,o.kt)("p",null,"The init --docker commad will create a ",(0,o.kt)("inlineCode",{parentName:"p"},"gwen/browsers/browsers.json")," file with the following content that will be used by Selenoid to stand up the browsers in Docker."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "chrome": {\n    "default": "latest",\n    "versions": {\n      "latest": {\n        "image": "selenoid/chrome:latest",\n        "port": "4444",\n        "path": "/"\n      }\n    }\n  },\n  "MicrosoftEdge": {\n    "default": "latest",\n    "versions": {\n      "latest": {\n        "image": "browsers/edge:latest",\n        "port": "4444",\n        "path": "/"\n      }\n    }\n  },\n  "firefox": {\n    "default": "latest",\n    "versions": {\n      "latest": {\n        "image": "selenoid/firefox:latest",\n        "port": "4444",\n        "path": "/wd/hub"\n      }\n    }\n  }\n}\n')),(0,o.kt)("h3",{id:"gwen-settings-file"},"Gwen settings file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:"{5}","{5}":!0},"./project                    # Your project root\n \u2514\u2500\u2500 /gwen\n     \u2514\u2500\u2500 /browsers\n         \u251c\u2500\u2500browsers.json    # Selenoid browsers file\n         \u2514\u2500\u2500selenoid.conf    # Selenoid Gwen settings\n")),(0,o.kt)("p",null,"The init --docker commad will create a ",(0,o.kt)("inlineCode",{parentName:"p"},"gwen/browsers/selenoid.conf")," file with the following content that will be used by Gwen to connect to Selenoid."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'gwen {\n  web {\n    capabilities {\n      "selenoid:options" {\n        enableVNC = true\n        enableVideo = true\n      }\n    }\n    remote {\n      url = "http://${env.SELENIUM_HUB}:4444/wd/hub"\n    }\n  }\n}\n')),(0,o.kt)("h2",{id:"package-json-script"},"Package JSON script"),(0,o.kt)("p",null,"Add the following ",(0,o.kt)("inlineCode",{parentName:"p"},"gwen:selenoid")," script to the ",(0,o.kt)("inlineCode",{parentName:"p"},"scripts")," section of the ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," file in your project."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:"{2}","{2}":!0},"./project             # Your project root\n \u2514\u2500\u2500 package.json     # Package json file\n")),(0,o.kt)("p",null,"This script will be called by the ",(0,o.kt)("inlineCode",{parentName:"p"},"gwen")," container in the ",(0,o.kt)("a",{parentName:"p",href:"#docker-compose-file"},"docker-compose")," file generated above."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"{2}","{2}":!0},'"scripts": {\n  "gwen:selenoid": "gwen -c gwen/browsers/selenoid.conf gwen/features"\n}\n')),(0,o.kt)("p",null,"Or to run the samples bundled in Gwen:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"{2}","{2}":!0},'"scripts": {\n  "gwen:selenoid": "gwen -c gwen/browsers/selenoid.conf gwen/samples"\n}\n')),(0,o.kt)("h2",{id:"run-gwen-in-docker"},"Run Gwen in docker"),(0,o.kt)("p",null,"Start your docker desktop engine (see ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-started/"},"getting started with Docker")," for more info)."),(0,o.kt)("p",null,"Create the Gwen output directory if it does not already exist."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir -p gwen/output\n")),(0,o.kt)("p",null,"Run the following command to build your docker image"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"docker-compose -f gwen/docker-compose.yml build\n")),(0,o.kt)("p",null,"Run the following command in your project directory to launch Gwen in docker and run your features"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"docker-compose -f gwen/docker-compose.yml run gwen\n")),(0,o.kt)("p",null,"To execute features in parallel (you can pass any number of ",(0,o.kt)("a",{parentName:"p",href:"/docs/cli#environment-variables"},"environment varaibles")," in this manner)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"GWEN_PARALLEL=true docker-compose -f gwen/docker-compose.yml run gwen\n")),(0,o.kt)("p",null,"To execute dry run instead (Since ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.35.0"},"v3.35.0"),")"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"docker-compose -f gwen/docker-compose.yml run gwen-dry-run\n")),(0,o.kt)("p",null,"Tear it all down when done"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"docker-compose -f gwen/docker-compose.yml down\n")),(0,o.kt)("h2",{id:"run-gwen-locally-with-selenoid-ui"},"Run Gwen locally with Selenoid UI"),(0,o.kt)("p",null,"Make sure ",(0,o.kt)("inlineCode",{parentName:"p"},"enableVNC = true")," in your ",(0,o.kt)("a",{parentName:"p",href:"#gwen-settings-file"},"selenoid settings"),". Then run the following command to launch the ",(0,o.kt)("a",{parentName:"p",href:"https://aerokube.com/selenoid-ui/latest/"},"Selenoid UI")," service in Docker"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"docker-compose -f gwen/docker-compose.yml run -d --service-ports selenoid-ui\n")),(0,o.kt)("p",null,"Open ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:8999"},"http://localhost:8999")," in a browser to check that the Selenoid UI is running and avaialable"),(0,o.kt)("p",null,"Run the following command to launch Gwen against your Selenoid instance in Docker. You will see browser session(s) appear in the Selenoid UI."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"SELENIUM_HUB=localhost yarn gwen:selenoid\n")),(0,o.kt)("p",null,"Tear it all down when done"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"docker-compose -f gwen/docker-compose.yml down\n")),(0,o.kt)("h2",{id:"video-capture"},"Video capture"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"See also: ",(0,o.kt)("a",{parentName:"p",href:"/docs/reports/video-recordings"},"Video recordings")," ")),(0,o.kt)("p",null,"If you set the ",(0,o.kt)("a",{parentName:"p",href:"/docs/cli#environment-variables"},(0,o.kt)("inlineCode",{parentName:"a"},"GWEN_VIDEO"))," environment variable or the ",(0,o.kt)("inlineCode",{parentName:"p"},"selenoid:options.enableVideo")," capability setting to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," in your ",(0,o.kt)("inlineCode",{parentName:"p"},"selenoid.conf")," file, MP4 video recordings of each session will be attached to the feature level ",(0,o.kt)("a",{parentName:"p",href:"/docs/reports/html"},"HTML reports"),". Set this to ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," if you do not wish to capture video."),(0,o.kt)("p",null,"File: ",(0,o.kt)("em",{parentName:"p"},"gwen/browsers/selenoid.conf")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"{6}","{6}":!0},'gwen {\n  web {\n    capabilities {\n      "selenoid:options" {\n        enableVNC = true\n        enableVideo = true\n      }\n    }\n    ..\n  }\n}\n')),(0,o.kt)("admonition",{title:"video settings",type:"note"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/settings/reference#gwen-video.dir"},(0,o.kt)("inlineCode",{parentName:"a"},"gwen-video.dir"))," ",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Should match host directory mounted to ",(0,o.kt)("inlineCode",{parentName:"li"},"/opt/selenoid/video")," in Selenoid video-recorder"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/settings/reference#gwen-video.timeoutSecs"},(0,o.kt)("inlineCode",{parentName:"a"},"gwen-video.timeoutSecs"))," ",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Time to wait for asyncronous video writes to complete (override only if default does not suffice)"))))),(0,o.kt)("admonition",{title:"Limitation",type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Videos will not be recorded when ",(0,o.kt)("a",{parentName:"p",href:"/docs/modes/parallel"},"parallel execution"),", ",(0,o.kt)("a",{parentName:"p",href:"/docs/settings/reference#gwen-web-browser-headless"},"headless browser"),", or interactive (non ",(0,o.kt)("a",{parentName:"p",href:"/docs/cli#gwen-cli-options-batch"},"--batch/-b"),") modes are enabled.")),(0,o.kt)("h2",{id:"arm-mac-notes"},"ARM Mac notes"),(0,o.kt)("h3",{id:"chrome-or-edge-crashes"},"Chrome or Edge crashes"),(0,o.kt)("p",null,"If you're running Chrome or Edge in a Selenoid docker container on a ARM Mac and encounter the following error"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"(unknown error: DevToolsActivePort file doesn't exist)\n")),(0,o.kt)("p",null,"Make the following changes to the following files to use the experimanal ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/seleniumhq-community/docker-seleniarm"},"Seleniarm")," images instead and try again."),(0,o.kt)("p",null,"File: ",(0,o.kt)("em",{parentName:"p"},"gwen/docker-compose.yml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"{4,8}","{4,8}":!0},"version: '3.5'\nservices:\n  chrome:\n    image: seleniarm/standalone-chromium:latest\n    networks:\n      - gwen-net\n  edge:\n    image: seleniarm/standalone-chromium:latest\n    networks:\n      - gwen-net\n")),(0,o.kt)("p",null,"File: ",(0,o.kt)("em",{parentName:"p"},"gwen/browsers/browsers.json")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"{6,16}","{6,16}":!0},'  {\n  "chrome": {\n    "default": "latest",\n    "versions": {\n      "latest": {\n        "image": "seleniarm/standalone-chromium:latest",\n        "port": "4444",\n        "path": "/"\n      }\n    }\n  },\n  "MicrosoftEdge": {\n    "default": "latest",\n    "versions": {\n      "latest": {\n        "image": "seleniarm/standalone-chromium:latest",\n        "port": "4444",\n        "path": "/"\n      }\n    }\n  }\n}\n')),(0,o.kt)("p",null,"The Selenoid video recorder won't work with the experimental Seleniarm images, so you should disable video "),(0,o.kt)("p",null,"File: ",(0,o.kt)("em",{parentName:"p"},"gwen/browsers/selenoid.conf")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"{6}","{6}":!0},'gwen {\n  web {\n    capabilities {\n      "selenoid:options" {\n        enableVNC = true\n        enableVideo = false\n      }\n    }\n    remote {\n      url = "http://${env.SELENIUM_HUB}:4444/wd/hub"\n    }\n  }\n}\n')))}g.isMDXComponent=!0}}]);