"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4138],{1470:(e,n,t)=>{t.d(n,{A:()=>S});var a=t(6540),s=t(4164),i=t(7559),r=t(3104),l=t(6347),o=t(205),c=t(7485),d=t(1682),h=t(679);function u(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function m(e){const{values:n,children:t}=e;return(0,a.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:t,default:a}})=>({value:e,label:n,attributes:t,default:a}))}(t);return function(e){const n=(0,d.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function p({value:e,tabValues:n}){return n.some(n=>n.value===e)}function x({queryString:e=!1,groupId:n}){const t=(0,l.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,c.aZ)(s),(0,a.useCallback)(e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})},[s,t])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,i=m(e),[r,l]=(0,a.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:i})),[c,d]=x({queryString:t,groupId:s}),[u,f]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,s]=(0,h.Dv)(n);return[t,(0,a.useCallback)(e=>{n&&s.set(e)},[n,s])]}({groupId:s}),j=(()=>{const e=c??u;return p({value:e,tabValues:i})?e:null})();(0,o.A)(()=>{j&&l(j)},[j]);return{selectedValue:r,selectValue:(0,a.useCallback)(e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),f(e)},[d,f,i]),tabValues:i}}var j=t(2303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(4848);function w({className:e,block:n,selectedValue:t,selectValue:a,tabValues:i}){const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,r.a_)(),c=e=>{const n=e.currentTarget,s=l.indexOf(n),r=i[s].value;r!==t&&(o(n),a(r))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:i.map(({value:e,label:n,attributes:a})=>(0,y.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{l.push(e)},onKeyDown:d,onClick:c,...a,className:(0,s.A)("tabs__item",g.tabItem,a?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function v({lazy:e,children:n,selectedValue:t}){const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=i.find(e=>e.props.value===t);return e?(0,a.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:i.map((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function b(e){const n=f(e);return(0,y.jsxs)("div",{className:(0,s.A)(i.G.tabs.container,"tabs-container",g.tabList),children:[(0,y.jsx)(w,{...n,...e}),(0,y.jsx)(v,{...n,...e})]})}function S(e){const n=(0,j.A)();return(0,y.jsx)(b,{...e,children:u(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var a=t(6540);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}},9082:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"meta","title":"Meta","description":"Meta specs are Gherkin specifications that describe how steps in features will execute and are the automation glue in Gwen. They define all the step definitions and bindings required for automation and attach to features at runtime.","source":"@site/docs/03-meta.mdx","sourceDirName":".","slug":"/meta","permalink":"/docs/meta","draft":false,"unlisted":false,"editUrl":"https://github.com/gwen-interpreter/gwen-interpreter.github.io/edit/master/docs/03-meta.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Meta","toc_min_heading_level":2,"toc_max_heading_level":3},"sidebar":"tutorialSidebar","previous":{"title":"Get Started","permalink":"/docs/get-started"},"next":{"title":"DSL","permalink":"/docs/dsl"}}');var s=t(4848),i=t(8453),r=(t(8774),t(1470)),l=t(9365);t(6025);const o={title:"Meta",toc_min_heading_level:2,toc_max_heading_level:3},c="Meta Specs",d={},h=[{value:"StepDefs",id:"stepdefs",level:2},{value:"Composable step definitions",id:"composable-step-definitions",level:3},{value:"StepDefs with parameters",id:"stepdefs-with-parameters",level:3},{value:"Synchronized StepDefs",id:"synchronized-stepdefs",level:3},{value:"Meta Load Strategies",id:"meta-load-strategies",level:2},{value:"Associative Strategy",id:"associative-strategy",level:3},{value:"Common Strategy",id:"common-strategy",level:3},{value:"Import Strategy",id:"import-strategy",level:3}];function u(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"meta-specs",children:"Meta Specs"})}),"\n",(0,s.jsxs)(n.p,{children:["Meta specs are ",(0,s.jsx)(n.a,{href:"https://cucumber.io/docs/gherkin/reference/",children:"Gherkin"})," specifications that describe how steps in features will execute and are the automation glue in Gwen. They define all the step definitions and ",(0,s.jsx)(n.a,{href:"/docs/dsl#bindings",children:"bindings"})," required for automation and attach to features at runtime."]}),"\n",(0,s.jsx)(n.h2,{id:"stepdefs",children:"StepDefs"}),"\n",(0,s.jsx)(n.h3,{id:"composable-step-definitions",children:"Composable step definitions"}),"\n",(0,s.jsxs)(n.p,{children:["Step definitions are defined as ",(0,s.jsx)("code",{children:"@StepDef"})," annotated ",(0,s.jsx)(n.a,{href:"https://cucumber.io/docs/gherkin/reference/#example",children:"Scenarios"})," with names that map to steps in features and bodies that call out to ",(0,s.jsx)(n.a,{href:"/docs/dsl",children:"DSL steps"})," to perform operations."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"Put all your step definitions in meta to keep your features clean and free of automation concerns."})}),"\n",(0,s.jsx)(n.p,{children:"Consider the following feature step:"}),"\n",(0,s.jsxs)(n.admonition,{title:"Feature Step",type:"note",children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"File: features/todo.feature"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gherkin",children:"  Given a new todo list\n"})})]}),"\n",(0,s.jsx)(n.p,{children:"A step definition for executing this step could be defined in meta as follows:"}),"\n",(0,s.jsxs)(n.admonition,{title:"StepDef",type:"note",children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"File: features/todo.meta"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gherkin",metastring:"{2-3}",children:'  @Context\n  @StepDef\n  Scenario: a new todo list\n    Given my todo list can be located by css ".todo-list"\n     When I navigate to "${todo.page.url}"\n     Then the page title should contain "TodoMVC"\n      And my todo list should be empty\n'})}),(0,s.jsx)(n.p,{children:"Calls DSL steps:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/dsl#element-can-be-located-by-selector-expression",children:(0,s.jsx)(n.code,{children:'<element> can be located by <selector> "<expression>"'})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/dsl#i-navigate-to-url",children:(0,s.jsx)(n.code,{children:'I navigate to "<url>"'})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/dsl#the-page-title-should-match-expression",children:(0,s.jsx)(n.code,{children:'the page title should[ not] <match> "<expression>"'})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/dsl#element-should-be-state",children:(0,s.jsx)(n.code,{children:"<element> should[ not] be <state>"})})}),"\n"]})]}),"\n",(0,s.jsxs)(n.p,{children:["Notice how the name of the StepDef matches the name of the feature step (excluding the leading ",(0,s.jsx)(n.em,{children:"Given"})," keyword). This is how step definitions bind to feature steps in Gwen; by name. Notice also that the body calls out to several DSL steps to perform the desired operations. Composing StepDefs in this manner is all you need to do to make your features executable."]}),"\n",(0,s.jsx)(n.h3,{id:"stepdefs-with-parameters",children:"StepDefs with parameters"}),"\n",(0,s.jsxs)(n.p,{children:["StepDefs can also be declared to accept parameters using one or more ",(0,s.jsx)(n.code,{children:"<param-name>"})," placeholders in the declared name as follows:"]}),"\n",(0,s.jsx)(n.admonition,{title:"Feature Step",type:"note",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gherkin",children:"  Then the list will contain 2 items\n"})})}),"\n",(0,s.jsxs)(n.admonition,{title:"StepDef with a parameter",type:"note",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gherkin",metastring:"{2-3,5}",children:'  @Assertion\n  @StepDef\n  Scenario: the list will contain <expected-count> items\n    Given the item count can be located by css ".todo-count"\n     Then the item count should contain "$<expected-count>"\n'})}),(0,s.jsx)(n.p,{children:"Calls DSL steps:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/dsl#element-can-be-located-by-selector-expression",children:(0,s.jsx)(n.code,{children:'<element> can be located by <selector> "<expression>"'})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/dsl#text-ref-should-match-expression",children:(0,s.jsx)(n.code,{children:'<textRef> should[ not] <match> "<expression>"'})})}),"\n"]})]}),"\n",(0,s.jsxs)(n.p,{children:["Here the name of the StepDef matches the name of the step in the feature when the value ",(0,s.jsx)("code",{children:"2"})," (in the feature step) is substituted in place of ",(0,s.jsx)(n.code,{children:"<expected-count>"})," in the StepDef name. This is how parameters are passed to StepDefs in Gwen; by substitution. The last step in the body utilises the parameter value as ",(0,s.jsx)(n.code,{children:"$<expected-count>"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"synchronized-stepdefs",children:"Synchronized StepDefs"}),"\n",(0,s.jsxs)(n.p,{children:["In the rare case where you might need to synchronize the execution of your StepDef to a single thread (due to resource contention or a conflict for example), you can do so by tagging it with the ",(0,s.jsx)(n.code,{children:"@Synchronized"})," annotation. Gwen will then guarantee that only one thread will execute your StepDef at any given time when multiple features or scenarios are executed in ",(0,s.jsx)(n.a,{href:"/docs/parallel",children:"parallel mode"})," by concurrent threads."]}),"\n",(0,s.jsx)(n.h2,{id:"meta-load-strategies",children:"Meta Load Strategies"}),"\n",(0,s.jsx)(n.h3,{id:"associative-strategy",children:"Associative Strategy"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Since ",(0,s.jsx)(n.a,{href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v2.40.0",children:"v2.40.0"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"A meta and feature file are considered to be associated with each other if the two files are in the same directory and have the same names (excluding their file extensions). The associative strategy will, for every feature:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Load the meta file with a matching file name if it exists in the same directory as the feature"}),"\n",(0,s.jsx)(n.li,{children:"Execute the feature"}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"Default setting",type:"info",children:(0,s.jsxs)(n.p,{children:["Associative meta is the default and always active strategy since  ",(0,s.jsx)(n.a,{href:"/docs/gwen4",children:"Gwen 4"}),"."]})}),"\n",(0,s.jsx)(n.p,{children:"If you have your meta and feature files in a directory structure as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"/features\n \u251c\u2500\u2500 todo.meta\n \u251c\u2500\u2500 todo.feature\n \u251c\u2500\u2500 /dir1\n \u2502    \u251c\u2500\u2500 todo1.meta\n \u2502    \u251c\u2500\u2500 todo1.feature\n \u2502    \u2514\u2500\u2500 todo1a.feature\n \u2514\u2500\u2500 /dir2\n      \u251c\u2500\u2500 todo2.meta\n      \u251c\u2500\u2500 todo2.feature\n      \u2514\u2500\u2500 /dir3\n           \u2514\u2500\u2500 todo3.feature\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When you launch Gwen to execute on the ",(0,s.jsx)(n.code,{children:"features"})," directory, the associative strategy will:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Load the ",(0,s.jsx)(n.code,{children:"todo.meta"})," and execute the ",(0,s.jsx)(n.code,{children:"todo.feature"})]}),"\n",(0,s.jsxs)(n.li,{children:["Load the ",(0,s.jsx)(n.code,{children:"todo1.meta"})," and execute the ",(0,s.jsx)(n.code,{children:"todo1.feature"})]}),"\n",(0,s.jsxs)(n.li,{children:["Load no associative meta and execute the ",(0,s.jsx)(n.code,{children:"todo1a.feature"})]}),"\n",(0,s.jsxs)(n.li,{children:["Load ",(0,s.jsx)(n.code,{children:"todo2.meta"})," and execute the ",(0,s.jsx)(n.code,{children:"todo2.feature"})]}),"\n",(0,s.jsxs)(n.li,{children:["Load no associative meta and execute the ",(0,s.jsx)(n.code,{children:"todo3.feature"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["When you launch Gwen to execute on the ",(0,s.jsx)(n.code,{children:"features/dir1"})," directory, the associative strategy will:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Load the ",(0,s.jsx)(n.code,{children:"todo1.meta"})," and execute the ",(0,s.jsx)(n.code,{children:"todo1.feature"})]}),"\n",(0,s.jsxs)(n.li,{children:["Load no associative meta and execute the ",(0,s.jsx)(n.code,{children:"todo1a.feature"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["When you launch Gwen to execute the ",(0,s.jsx)(n.code,{children:"features/dir2/todo2.feature"})," file, the associative strategy will:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Load no associative meta and execute the ",(0,s.jsx)(n.code,{children:"todo2.feature"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"common-strategy",children:"Common Strategy"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Since ",(0,s.jsx)(n.a,{href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v1.0.0",children:"v1.0.0"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The common strategy enables you to manage common and reusable meta files (in addition to associateve meta) in a directory other than your features directory. How you name your meta files or manage your meta directory structure does not matter."}),"\n",(0,s.jsxs)(r.A,{groupId:"jstool",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"npm",value:"npm"},{label:"pnpm",value:"pnpm"}],children:[(0,s.jsx)(l.A,{value:"yarn",children:(0,s.jsxs)(n.admonition,{title:"Example",type:"note",children:[(0,s.jsxs)(n.p,{children:["To load a single meta file from a ",(0,s.jsx)(n.code,{children:"meta"})," directory (for example), use the ",(0,s.jsx)(n.a,{href:"/docs/launcher#gwen-launch-options-meta",children:(0,s.jsx)(n.code,{children:"-m|meta"})})," launch option and specify the path to the meta file:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"yarn gwen -m meta/common.meta\n"})}),(0,s.jsxs)(n.p,{children:["To recursively load all meta files in the ",(0,s.jsx)(n.code,{children:"meta"})," directory:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"yarn gwen gwen/features -m meta\n"})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/launcher",children:"Gwen Launcher"})})]})}),(0,s.jsx)(l.A,{value:"npm",children:(0,s.jsxs)(n.admonition,{title:"Example",type:"note",children:[(0,s.jsxs)(n.p,{children:["To load a single meta file from a ",(0,s.jsx)(n.code,{children:"meta"})," directory (for example), use the ",(0,s.jsx)(n.a,{href:"/docs/launcher#gwen-launch-options-meta",children:(0,s.jsx)(n.code,{children:"-m|meta"})})," launch option and specify the path to the meta file:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"npm run gwen -- -m meta/common.meta\n"})}),(0,s.jsxs)(n.p,{children:["To recursively load all meta files in the ",(0,s.jsx)(n.code,{children:"meta"})," directory:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"npm run gwen -- gwen/features -m meta\n"})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/launcher",children:"Gwen Launcher"})})]})}),(0,s.jsx)(l.A,{value:"pnpm",children:(0,s.jsxs)(n.admonition,{title:"Example",type:"note",children:[(0,s.jsxs)(n.p,{children:["To load a single meta file from a ",(0,s.jsx)(n.code,{children:"meta"})," directory (for example), use the ",(0,s.jsx)(n.a,{href:"/docs/launcher#gwen-launch-options-meta",children:(0,s.jsx)(n.code,{children:"-m|meta"})})," launch option and specify the path to the meta file:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pnpm gwen -m meta/common.meta\n"})}),(0,s.jsxs)(n.p,{children:["To recursively load all meta files in the ",(0,s.jsx)(n.code,{children:"meta"})," directory:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pnpm gwen gwen/features -m meta\n"})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/launcher",children:"Gwen Launcher"})})]})})]}),"\n",(0,s.jsx)(n.h3,{id:"import-strategy",children:"Import Strategy"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Since ",(0,s.jsx)(n.a,{href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v1.9.0",children:"v1.9.0"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The import strategy enables you to selectively import one or more meta files for any given feature file so they will load automatically without you having to specify their locations using the ",(0,s.jsx)(n.a,{href:"/docs/launcher#gwen-launch-options-meta",children:(0,s.jsx)(n.code,{children:"-m|meta"})})," launch option on every launch. This is useful for cases where you have many reusable meta files and it is not practical to load all of them for every feature file."]}),"\n",(0,s.jsx)(n.p,{children:"The import strategy can be used to avoid redundant meta loads and improve performance and scalability in extreme cases where all your common meta combined exceeds or approaches 500 KB in size (that is: when you have LOTS of common meta)."}),"\n",(0,s.jsx)(n.p,{children:"For example, say you have your common meta files in one directory and your feature files in another directory as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"/meta\n \u251c\u2500\u2500 module-1.meta\n \u251c\u2500\u2500 module-2.meta\n \u251c\u2500\u2500 module-3.meta\n \u2502    ..\n \u251c\u2500\u2500 module-n.meta\n \u251c\u2500\u2500 /dir1\n \u2502    \u251c\u2500\u2500 submodule-1.meta\n \u2502    \u251c\u2500\u2500 submodule-2.meta\n \u2502    \u251c\u2500\u2500 submodule-3.meta\n \u2502    \u2502    ..\n \u2502    \u2514\u2500\u2500 submodule-n.meta\n \u2502\n/features\n \u251c\u2500\u2500 spec-1.feature\n \u251c\u2500\u2500 spec-2.feature\n \u251c\u2500\u2500 spec-3.feature\n \u2502    ..\n \u2514\u2500\u2500 spec-n.feature\n"})}),"\n",(0,s.jsxs)(r.A,{groupId:"jstool",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"npm",value:"npm"},{label:"pnpm",value:"pnpm"}],children:[(0,s.jsx)(l.A,{value:"yarn",children:(0,s.jsxs)(n.admonition,{title:"Example",type:"note",children:[(0,s.jsxs)(n.p,{children:["To load only one meta file for one feature file using the common meta strategy, you would have to explicitly specify which one using the ",(0,s.jsx)(n.code,{children:"-m|meta"})," CLI option as follows:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"yarn gwen -m gwen/meta/module-1.meta gwen/features/spec-1.feature\n"})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/launcher",children:"Gwen Launcher"})})]})}),(0,s.jsx)(l.A,{value:"npm",children:(0,s.jsxs)(n.admonition,{title:"Example",type:"note",children:[(0,s.jsxs)(n.p,{children:["To load only one meta file for one feature file using the common meta strategy, you would have to explicitly specify which one using the ",(0,s.jsx)(n.code,{children:"-m|meta"})," CLI option as follows:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"npm run gwen -- -m gwen/meta/module-1.meta gwen/features/spec-1.feature\n"})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/launcher",children:"Gwen Launcher"})})]})}),(0,s.jsx)(l.A,{value:"pnpm",children:(0,s.jsxs)(n.admonition,{title:"Example",type:"note",children:[(0,s.jsxs)(n.p,{children:["To load only one meta file for one feature file using the common meta strategy, you would have to explicitly specify which one using the ",(0,s.jsx)(n.code,{children:"-m|meta"})," CLI option as follows:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pnpm gwen -m gwen/meta/module-1.meta gwen/features/spec-1.feature\n"})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/launcher",children:"Gwen Launcher"})})]})})]}),"\n",(0,s.jsx)(n.p,{children:"Having to remember exactly which meta to load for which features is inconvenient and blindly loading all meta files to execute a feature that only requires one or some of them is wasteful."}),"\n",(0,s.jsxs)(n.p,{children:["With ",(0,s.jsx)(n.a,{href:"/docs/meta#associative-strategy",children:"associative meta"})," enabled, you can do away with having to explicitly specify any meta files on CLI calls to Gwen by creating an associative meta file for each feature file and specifying the required meta to import in each."]}),"\n",(0,s.jsx)(n.admonition,{title:"Use imports in associative meta",type:"tip",children:(0,s.jsx)(n.p,{children:"Although it's possible to specify imports directly in feature files, we do not recommend you doing so since it would introduce automation concerns into your features. Confining imports to associative meta instead will keep your features clean and untouched."})}),"\n",(0,s.jsxs)(n.p,{children:["For example, you could import the ",(0,s.jsx)(n.code,{children:"module-1.meta"})," into a new (or existing) associative meta file for ",(0,s.jsx)(n.code,{children:"spec-1.feature"})," as follows:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"File: features/spec-1.meta"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gherkin",children:'  @Import("meta/module-1.meta")\n  Feature: Associative spec 1 meta\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Or using relative path since ",(0,s.jsx)(n.a,{href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v4.0.0",children:"v4.0.0"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gherkin",children:'  @Import("../meta/module-1.meta")\n  Feature: Associative spec 1 meta\n'})}),"\n",(0,s.jsx)(n.p,{children:"Note that this associative meta specification contains nothing except one import annotation followed by a feature declaration and name. It contains nothing else since it serves only to import one meta file. It would sit alongside your unchanged feature file on the file system as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"/features\n \u251c\u2500\u2500 spec-1.feature\n \u251c\u2500\u2500 spec-1.meta\n \u2502    ..\n/meta\n \u251c\u2500\u2500 module-1.meta\n |   ..\n"})}),"\n",(0,s.jsxs)(r.A,{groupId:"jstool",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"npm",value:"npm"},{label:"pnpm",value:"pnpm"}],children:[(0,s.jsx)(l.A,{value:"yarn",children:(0,s.jsxs)(n.admonition,{title:"Example",type:"note",children:[(0,s.jsx)(n.p,{children:"With the import in place, you could then invoke Gwen to execute the feature without having to explicitly specify the meta file in the CLI call:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"yarn gwen gwen/features/spec-1.feature\n"})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/launcher",children:"Gwen Launcher"})})]})}),(0,s.jsx)(l.A,{value:"npm",children:(0,s.jsxs)(n.admonition,{title:"Example",type:"note",children:[(0,s.jsx)(n.p,{children:"With the import in place, you could then invoke Gwen to execute the feature without having to explicitly specify the meta file in the CLI call:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"npm run gwen -- gwen/features/spec-1.feature\n"})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/launcher",children:"Gwen Launcher"})})]})}),(0,s.jsx)(l.A,{value:"pnpm",children:(0,s.jsxs)(n.admonition,{title:"Example",type:"note",children:[(0,s.jsx)(n.p,{children:"With the import in place, you could then invoke Gwen to execute the feature without having to explicitly specify the meta file in the CLI call:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pnpm gwen gwen/features/spec-1.feature\n"})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/launcher",children:"Gwen Launcher"})})]})})]}),"\n",(0,s.jsx)(n.p,{children:"Gwen would then load the associative meta which in turn would load the imported meta before proceeding to execute the feature."}),"\n",(0,s.jsx)(n.p,{children:"You can add any number of meta imports to a file. The following example imports two meta files for spec 2:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"File: features/spec-2.meta"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gherkin",children:'  @Import("meta/module-1.meta")\n  @Import("meta/module-2.meta")\n  Feature: Associative spec 2 meta\n'})}),"\n",(0,s.jsxs)(n.p,{children:["You can also chain or link imports together. For example, if you wanted ",(0,s.jsx)(n.code,{children:"module-2.meta"})," to load whenever ",(0,s.jsx)(n.code,{children:"module-3.meta"})," is loaded, you could import the former into the latter as follows:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"File: meta/module-3.meta"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gherkin",children:'  @Import("meta/module-2.meta")\n  Feature: meta 3\n\n\n  @StepDef\n  Scenario: ..\n    Given ..\n     When ..\n     Then ..\n  ..\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Now any import of ",(0,s.jsx)(n.code,{children:"module-3.meta"})," will also import ",(0,s.jsx)(n.code,{children:"module-2.meta"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"File: features/spec-3.meta"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gherkin",children:'  @Import("meta/module-3.meta")\n  Feature: Associative spec 3 meta\n'})}),"\n",(0,s.jsxs)(r.A,{groupId:"jstool",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"npm",value:"npm"},{label:"pnpm",value:"pnpm"}],children:[(0,s.jsx)(l.A,{value:"yarn",children:(0,s.jsxs)(n.admonition,{title:"Example",type:"note",children:[(0,s.jsxs)(n.p,{children:["In this example, the ",(0,s.jsx)(n.code,{children:"module-2.meta"})," and ",(0,s.jsx)(n.code,{children:"module-3.meta"})," files will be loaded (in that order) before ",(0,s.jsx)(n.code,{children:"test-3.feature"})," is executed.  Again, this would happen without you having to specify any meta in the CLI call to Gwen."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"yarn gwen features/spec-3.feature\n"})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/launcher",children:"Gwen Launcher"})})]})}),(0,s.jsx)(l.A,{value:"npm",children:(0,s.jsxs)(n.admonition,{title:"Example",type:"note",children:[(0,s.jsxs)(n.p,{children:["In this example, the ",(0,s.jsx)(n.code,{children:"module-2.meta"})," and ",(0,s.jsx)(n.code,{children:"module-3.meta"})," files will be loaded (in that order) before ",(0,s.jsx)(n.code,{children:"test-3.feature"})," is executed.  Again, this would happen without you having to specify any meta in the CLI call to Gwen."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"npm run gwen -- gwen/features/spec-3.feature\n"})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/launcher",children:"Gwen Launcher"})})]})}),(0,s.jsx)(l.A,{value:"pnpm",children:(0,s.jsxs)(n.admonition,{title:"Example",type:"note",children:[(0,s.jsxs)(n.p,{children:["In this example, the ",(0,s.jsx)(n.code,{children:"module-2.meta"})," and ",(0,s.jsx)(n.code,{children:"module-3.meta"})," files will be loaded (in that order) before ",(0,s.jsx)(n.code,{children:"test-3.feature"})," is executed.  Again, this would happen without you having to specify any meta in the CLI call to Gwen."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pnpm gwen gwen/features/spec-3.feature\n"})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/launcher",children:"Gwen Launcher"})})]})})]}),"\n",(0,s.jsx)(n.p,{children:"The path to the meta file in all imports can be absolute or relative. If a recursive (or cyclic) import is detected in any import chain, Gwen will report it by throwing an exception with a message identifying the offending import and the file it was declared in."}),"\n",(0,s.jsx)(n.p,{children:"Meta files loaded through the import strategy get last precedence and therefore can be overridden by meta files loaded through any other meta load strategy."})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},9365:(e,n,t)=>{t.d(n,{A:()=>r});t(6540);var a=t(4164);const s={tabItem:"tabItem_Ymn6"};var i=t(4848);function r({children:e,hidden:n,className:t}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,t),hidden:n,children:e})}}}]);