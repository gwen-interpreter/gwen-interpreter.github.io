"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[359],{6056:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return u},metadata:function(){return d},toc:function(){return m},default:function(){return h}});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),r=n(5064),s=n(8215),l=["components"],p={sidebar_position:3},u="Using Gwen",d={unversionedId:"using-gwen",id:"using-gwen",isDocsHomePage:!1,title:"Using Gwen",description:"Once you have installed Gwen Gwen and set up your project, you can start building up your feature suite. Doing this is an interative three step process.",source:"@site/docs/using-gwen.mdx",sourceDirName:".",slug:"/using-gwen",permalink:"/docs/using-gwen",editUrl:"https://github.com/gwen-interpreter/gwen-interpreter.github.io/gwen-web/docs/using-gwen.mdx",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Get Started",permalink:"/docs/get-started"},next:{title:"Settings",permalink:"/docs/configuration/settings"}},m=[{value:"1. Declare Features",id:"1-declare-features",children:[]},{value:"2. Compose Meta",id:"2-compose-meta",children:[{value:"Associative Meta",id:"associative-meta",children:[]}]},{value:"3. Launch Gwen",id:"3-launch-gwen",children:[]}],c={toc:m};function h(e){var t=e.components,n=(0,i.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"using-gwen"},"Using Gwen"),(0,o.kt)("p",null,"Once you have ",(0,o.kt)("a",{parentName:"p",href:"get-started#install-gwen"},"installed Gwen")," Gwen and set up your project, you can start building up your feature suite. Doing this is an interative three step process."),(0,o.kt)("h2",{id:"1-declare-features"},"1. Declare Features"),(0,o.kt)("p",null,"Put your ",(0,o.kt)("a",{parentName:"p",href:"https://cucumber.io/docs/gherkin/reference/#feature"},"feature specs")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"features")," directory of your Gwen project."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Feature specs should describe the behaviour of a feature in a declarative manner. Do not give any thought to automation when writing them. Avoid putting ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen-web/wiki/Supported-DSL"},"Gwen DSL steps")," in them too since they are meant for automation purposes and should only be referenced in meta where they belong."),(0,o.kt)("p",{parentName:"div"},"Gwen enforces these rules by default and reports any such violations are errors to help you to write ",(0,o.kt)("a",{parentName:"p",href:"https://gweninterpreter.wordpress.com/2020/03/09/strictly-good-gherkin-with-gwen/"},"strictly good Gherkin"),"."),(0,o.kt)("p",{parentName:"div"},"You can however disable these checks at your own choosing by changing the ",(0,o.kt)("inlineCode",{parentName:"p"},"gwen.feature.mode")," setting to ",(0,o.kt)("inlineCode",{parentName:"p"},"imperative")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"declarative")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"gwen.behavior.rules")," setting to ",(0,o.kt)("inlineCode",{parentName:"p"},"lenient")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"strict"),"."))),(0,o.kt)("p",null,"For example, create a new ",(0,o.kt)("inlineCode",{parentName:"p"},"todo.feature")," file with the following content in your ",(0,o.kt)("inlineCode",{parentName:"p"},"features")," directory."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"File: gwen/features/todo.feature")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin"},"Feature: Todo\n \n  Scenario: Create todo list\n    Given a new todo list\n     When the following items are added\n          | Item          |\n          | Get the milk  |\n          | Walk the dog  |\n     Then the list will contain 2 items\n")),(0,o.kt)("h2",{id:"2-compose-meta"},"2. Compose Meta"),(0,o.kt)("p",null,"Write ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen/wiki/Meta-Features"},"meta specs")," to define all the step definitions required to execute all steps in your features."),(0,o.kt)("h3",{id:"associative-meta"},"Associative Meta"),(0,o.kt)("p",null,"Start by writing one meta spec per feature file and store them in the same directory as your feature files. Name them with the same names that their associative feature files have but with the ",(0,o.kt)("inlineCode",{parentName:"p"},"meta")," file extention instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"feature"),". You can refactor and eliminate any redudances that might emerge in your meta later."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"By default, Gwen will load and bind same named ",(0,o.kt)("inlineCode",{parentName:"p"},"*.meta")," files to same named ",(0,o.kt)("inlineCode",{parentName:"p"},"*.feature")," files  ONLY in any given directory!"),(0,o.kt)("p",{parentName:"div"},"You can disable this default by setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"gwen.associative.meta")," setting to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),". However take some time to read about ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen/wiki/Meta-Features#meta-strategies"},"Gwen meta strategies")," first to get a good understanding of how Gwen loads meta so that you know the repercussions (if any) that changing this setting could introduce to your project."))),(0,o.kt)("p",null,"Each step definition is defined as a ",(0,o.kt)("inlineCode",{parentName:"p"},"@StepDef")," annotated scenario with a name that matches the calling step and contains one or more steps that call out to other step definitions or predefined Gwen ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen-web/wiki/Supported-DSL"},"Web DSL")," steps that perform the prescribed browser operations. Steps containing ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen/wiki/Data-Tables"},"Data tables")," can also be mapped to step definitions using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@ForEach")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"@DataTable")," annotations as shown in the example. Inputs to steps can also be parameterised using the ",(0,o.kt)("inlineCode",{parentName:"p"},"<param>")," syntax and resolved with ",(0,o.kt)("inlineCode",{parentName:"p"},"$<param>"),"."),(0,o.kt)("p",null,"For example, create a new ",(0,o.kt)("inlineCode",{parentName:"p"},"todo.meta")," file with the following content in your ",(0,o.kt)("em",{parentName:"p"},"gwen/features")," folder. "),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"File: gwen/features/todo.meta")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin"},'Feature: Todo Meta (automation glue)\n\n  @StepDef\n  Scenario: a new todo list\n       When I navigate to "http://todomvc.com/examples/react"\n       Then the todo field can be located by class "new-todo"\n        And count can be located by css ".todo-count strong"\n                        \n  @StepDef\n  @ForEach\n  @DataTable(header="top")\n  Scenario: the following items are added\n       When I enter data[Item] in the todo field\n\n  @StepDef\n  Scenario: the list will contain <expected> items\n       Then count should be "$<expected>"\n')),(0,o.kt)("h2",{id:"3-launch-gwen"},"3. Launch Gwen"),(0,o.kt)("p",null,"Launch Gwen in your project root directory to execute your features!"),(0,o.kt)(r.Z,{defaultValue:"npm",values:[{label:"npm",value:"npm"},{label:"Yarn",value:"yarn"},{label:"Standalone",value:"standalone"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,o.kt)("p",null,"Execute all features"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"npm run gwen -b /gwen/features\n")),(0,o.kt)("p",null,"Execute one feature"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"npm run gwen -b /gwen/features/todo.feature\n"))),(0,o.kt)(s.Z,{value:"yarn",mdxType:"TabItem"},(0,o.kt)("p",null,"Execute all features"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"yarn gwen -b /gwen/features\n")),(0,o.kt)("p",null,"Execute one feature"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"yarn gwen -b /gwen/features/todo.feature\n"))),(0,o.kt)(s.Z,{value:"standalone",mdxType:"TabItem"},(0,o.kt)("p",null,"Execute all features"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"gwen -b /features\n")),(0,o.kt)("p",null,"Execute one feature"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"gwen -b /features/todo.feature\n")))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"-b")," (",(0,o.kt)("inlineCode",{parentName:"p"},"--batch"),") switch tells Gwen to exit immediately after feature execution completes. Omitting it will open the interactive ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen/wiki/REPL-Console"},"Gwen REPL Console")," upon completion instead.")))}h.isMDXComponent=!0}}]);