"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2475],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),s=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(t),m=r,h=c["".concat(u,".").concat(m)]||c[m]||p[m]||o;return t?a.createElement(h,i(i({ref:n},d),{},{components:t})):a.createElement(h,i({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=c;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5162:function(e,n,t){t.d(n,{Z:function(){return i}});var a=t(7294),r=t(4334),o="tabItem_Ymn6";function i(e){var n=e.children,t=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:t},n)}},4866:function(e,n,t){t.d(n,{Z:function(){return N}});var a=t(3117),r=t(7294),o=t(4334),i=t(6775),l=t(1980),u=t(7392),s=t(12);function d(e){return function(e){var n,t;return null!=(n=null==(t=r.Children.map(e,(function(e){if(!e||(0,r.isValidElement)(e)&&(n=e.props)&&"object"==typeof n&&"value"in n)return e;var n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:t.filter(Boolean))?n:[]}(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}function p(e){var n=e.values,t=e.children;return(0,r.useMemo)((function(){var e=null!=n?n:d(t);return function(e){var n=(0,u.l)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function c(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function m(e){var n=e.queryString,t=void 0!==n&&n,a=e.groupId,o=(0,i.k6)(),u=function(e){var n=e.queryString,t=void 0!==n&&n,a=e.groupId;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:t,groupId:a});return[(0,l._X)(u),(0,r.useCallback)((function(e){if(u){var n=new URLSearchParams(o.location.search);n.set(u,e),o.replace(Object.assign({},o.location,{search:n.toString()}))}}),[u,o])]}function h(e){var n,t,a,o,i=e.defaultValue,l=e.queryString,u=void 0!==l&&l,d=e.groupId,h=p(e),f=(0,r.useState)((function(){return function(e){var n,t=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}var r=null!=(n=a.find((function(e){return e.default})))?n:a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:i,tabValues:h})})),v=f[0],b=f[1],y=m({queryString:u,groupId:d}),g=y[0],k=y[1],w=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:d}.groupId),t=(0,s.Nk)(n),a=t[0],o=t[1],[a,(0,r.useCallback)((function(e){n&&o.set(e)}),[n,o])]),N=w[0],x=w[1],I=function(){var e=null!=g?g:N;return c({value:e,tabValues:h})?e:null}();return(0,r.useLayoutEffect)((function(){I&&b(I)}),[I]),{selectedValue:v,selectValue:(0,r.useCallback)((function(e){if(!c({value:e,tabValues:h}))throw new Error("Can't select invalid tab value="+e);b(e),k(e),x(e)}),[k,x,h]),tabValues:h}}var f=t(2466),v=t(2389),b="tabList__CuJ",y="tabItem_LNqP";function g(e){var n=e.className,t=e.block,i=e.selectedValue,l=e.selectValue,u=e.tabValues,s=[],d=(0,f.o5)().blockElementScrollPositionUntilNextRender,p=function(e){var n=e.currentTarget,t=s.indexOf(n),a=u[t].value;a!==i&&(d(n),l(a))},c=function(e){var n,t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":var a,r=s.indexOf(e.currentTarget)+1;t=null!=(a=s[r])?a:s[0];break;case"ArrowLeft":var o,i=s.indexOf(e.currentTarget)-1;t=null!=(o=s[i])?o:s[s.length-1]}null==(n=t)||n.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},u.map((function(e){var n=e.value,t=e.label,l=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:function(e){return s.push(e)},onKeyDown:c,onClick:p},l,{className:(0,o.Z)("tabs__item",y,null==l?void 0:l.className,{"tabs__item--active":i===n})}),null!=t?t:n)})))}function k(e){var n=e.lazy,t=e.children,a=e.selectedValue,o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){var i=o.find((function(e){return e.props.value===a}));return i?(0,r.cloneElement)(i,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})})))}function w(e){var n=h(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",b)},r.createElement(g,(0,a.Z)({},e,n)),r.createElement(k,(0,a.Z)({},e,n)))}function N(e){var n=(0,v.Z)();return r.createElement(w,(0,a.Z)({key:String(n)},e))}},6208:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var a=t(3117),r=t(102),o=(t(7294),t(3905)),i=(t(9960),t(4866),t(5162),t(4996),["components"]),l={toc_min_heading_level:2,toc_max_heading_level:3},u="Dry Runs",s={unversionedId:"modes/dry-runs",id:"modes/dry-runs",title:"Dry Runs",description:"Since v1.0.0",source:"@site/docs/09-modes/05-dry-runs.mdx",sourceDirName:"09-modes",slug:"/modes/dry-runs",permalink:"/docs/modes/dry-runs",draft:!1,editUrl:"https://github.com/gwen-interpreter/gwen-interpreter.github.io/edit/master/docs/09-modes/05-dry-runs.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{toc_min_heading_level:2,toc_max_heading_level:3},sidebar:"tutorialSidebar",previous:{title:"Parallel",permalink:"/docs/modes/parallel"},next:{title:"Data Driven",permalink:"/docs/modes/data-driven"}},d={},p=[{value:"Catch syntax and binding errors",id:"catch-syntax-and-binding-errors",level:2},{value:"Example",id:"example",level:4},{value:"DryRun Annotations",id:"dryrun-annotations",level:2},{value:"Example",id:"example-1",level:4},{value:"A non-ideal workaround",id:"a-non-ideal-workaround",level:4},{value:"Single Values",id:"single-values",level:3},{value:"Multiple Values",id:"multiple-values",level:3},{value:"Delimited Values",id:"delimited-values",level:3}],c={toc:p};function m(e){var n=e.components,l=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,l,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"dry-runs"},"Dry Runs"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Since ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v1.0.0"},"v1.0.0"))),(0,o.kt)("h2",{id:"catch-syntax-and-binding-errors"},"Catch syntax and binding errors"),(0,o.kt)("p",null,"Dry runs can be performed on features to verify that they are syntactically correct and that all references have bindings that will resolve at runtime. This allows you to quickly validate features and catch potential errors before committing them to an execution cycle. The ",(0,o.kt)("a",{parentName:"p",href:"/docs/cli#gwen-cli-options-dry-run"},(0,o.kt)("inlineCode",{parentName:"a"},"-n|--dry-run"))," CLI option is used to launch Gwen in this mode."),(0,o.kt)("p",null,"The primary purpose of dry runs is to perform static validation of all syntax, bindings and ",(0,o.kt)("a",{parentName:"p",href:"/docs/meta#stepdefs"},"StepDefs")," throughout your feature and ",(0,o.kt)("a",{parentName:"p",href:"/docs/meta"},"meta")," files. In a dry run:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Browsers sessions are never started"),(0,o.kt)("li",{parentName:"ul"},"Web pages are never loaded (and web elements can therefore cannot be accessed)"),(0,o.kt)("li",{parentName:"ul"},"Non static bindings are never evaluated"),(0,o.kt)("li",{parentName:"ul"},"JavaScript is never evaluated"),(0,o.kt)("li",{parentName:"ul"},"System processes are never evaluated"),(0,o.kt)("li",{parentName:"ul"},"Databases are never accessed")),(0,o.kt)("p",null,"Results will be logged to the console and in ",(0,o.kt)("a",{parentName:"p",href:"/docs/reports/html"},"HTML reports")," that you can inspect to find discovered issues."),(0,o.kt)("h4",{id:"example"},"Example"),(0,o.kt)("p",null,"If you leave out or forget to define a selector for an input field, it would be detected by a dry run and reported in the HTML report as follows:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Example dry run with error",src:t(4314).Z,width:"1588",height:"1118"})),(0,o.kt)("h2",{id:"dryrun-annotations"},"DryRun Annotations"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Coming soon to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.55.0"},"v3.55.0"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@DryRun")," annotations can be used on any step to assign a value (or values) to any reference in a dry run evaluation."),(0,o.kt)("p",null,"These are useful in dry runs when: "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A reference to a binding cannot be evaluated and causes failures that otherwise would not normally occur outside of a dry run"),(0,o.kt)("li",{parentName:"ul"},"You want to exercise all step definitions and combinations of parameters to step definitions"),(0,o.kt)("li",{parentName:"ul"},"You want to exercise an abstraction over a fixed set of inputs")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"DryRun annotations are only honoured in dry run evaluations and are completely ignored otherwise!")),(0,o.kt)("h4",{id:"example-1"},"Example"),(0,o.kt)("p",null,"Consider a ",(0,o.kt)("a",{parentName:"p",href:"/docs/meta"},"meta")," file with the following step definitions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin"},"  @StepDef\n  Scenario: I perform step 1\n    When I do this thing\n\n  @StepDef\n  Scenario: I perform step 2\n    When I do that thing\n")),(0,o.kt)("p",null,"Consider the following scenario where you might want to call step the 1st or 2nd step definition by fetching a ",(0,o.kt)("inlineCode",{parentName:"p"},"number")," from an input field on a web page."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{3}","{3}":!0},'  Given number can be located by css "input[name=\'number\']"\n   When I navigate to "https://example.com"\n    And I perform step ${number}\n   Then ..\n')),(0,o.kt)("p",null,"This would work perfecly fine when the value evaluates to 1 or 2 in a web page loaded in a browser. However during a dry run, browsers sessions are never started, web pages are never loaded and looking up web elements and fetching their values is not possible. Therefore the 3rd step above would fail since the number in the input field is nowhere to be accessed. In this instance, the standard Gwen behavior is to return a dry run placeholder value of ",(0,o.kt)("inlineCode",{parentName:"p"},"$[dryValue:webElementText]"),". That step on the 3rd line would resolve to the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin"},"  And I perform step $[dryValue:webElementText]\n")),(0,o.kt)("p",null,"This would result in an unsupported or undefined step error being raised since it cannot be matched to any step definitions."),(0,o.kt)("h4",{id:"a-non-ideal-workaround"},"A non-ideal workaround"),(0,o.kt)("p",null,"Prior to ",(0,o.kt)("inlineCode",{parentName:"p"},"@DryRun")," annotations being introduced, one way to work around this problem involved introducing predicates and using those as guards on calls to each step definition explicitly as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{2-3,5-6}","{2-3,5-6}":!0},'  Given number can be located by css "input[name=\'number\']"\n    And number 1 is defined by js "${number} == 1"\n    And number 2 is defined by js "${number} == 2"\n   When I navigate to "https://example.com"\n    And I perform step 1 if number 1\n    And I perform step 2 if number 2\n   Then ..\n')),(0,o.kt)("p",null,"This works since Gwen will always resolve a predicate to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," in a dry run. However this is not ideal since it introduces unwanted redundancy and is the primary reason ",(0,o.kt)("inlineCode",{parentName:"p"},"@DryRun")," annotations were introduced; so we never have to do this!"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Use DryRun annotions to avoid workarounds that introduce redundancy and keep your scenarios clean and intact.")),(0,o.kt)("h3",{id:"single-values"},"Single Values"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Annotation synax: ",(0,o.kt)("inlineCode",{parentName:"p"},"@DryRun(name='<name>',value='<value>')"))),(0,o.kt)("p",null,"The solution is to provide a dry run value for ",(0,o.kt)("inlineCode",{parentName:"p"},"number")," on the step using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@DryRun")," annotation as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{3}","{3}":!0},"  Given number can be located by css \"input[name='number']\"\n   When I navigate to \"https://example.com\"\n    And I perform step ${number}    @DryRun(name='number',value='1')\n   Then ..\n")),(0,o.kt)("p",null,"Now when you do a dry run on this, the ",(0,o.kt)("inlineCode",{parentName:"p"},"${number}")," reference will take on the value ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," and resolve to the following step:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin"},"  And I perform step 1\n")),(0,o.kt)("p",null,"This would result in a successful call the 1st step definition. So it will be exercised in the dry run."),(0,o.kt)("h3",{id:"multiple-values"},"Multiple Values"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Annotation synax: ",(0,o.kt)("inlineCode",{parentName:"p"},"@DryRun(name='<name>',value={'<value-1>','<value-2>','<value-N>'})"))),(0,o.kt)("p",null,"What if we wanted to exercise both step defenitions 1 and 2? The solution is to provide multiple dry run values for ",(0,o.kt)("inlineCode",{parentName:"p"},"number")," on the calling step using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@DryRun")," annotation as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{3} showLineNumbers","{3}":!0,showLineNumbers:!0},"  Given number can be located by css \"input[name='number']\"\n   When I navigate to \"https://example.com\"\n    And I perform step ${number}    @DryRun(name='number',value={'1','2'})\n   Then ..\n")),(0,o.kt)("p",null,"Now when you do a dry run on this, the ",(0,o.kt)("inlineCode",{parentName:"p"},"${number}")," reference will take on the value ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," followed by ",(0,o.kt)("inlineCode",{parentName:"p"},"2")," and the step on line 3 above will expand and resolve into the following two steps:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin"},"  And I perform step 1\n  And I perform step 2\n")),(0,o.kt)("p",null,"This would result in a successful call to both the 1st and 2nd step definitions. So both will be exercised in the dry run."),(0,o.kt)("h3",{id:"delimited-values"},"Delimited Values"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Annotation synax: ",(0,o.kt)("inlineCode",{parentName:"p"},"@DryRun(name='<name>',value='<value-1> <value-2> <value-N>')")," (space delimited example)")),(0,o.kt)("p",null,"Similarly, you can also assign a dry run value to any binding that cannot be evaluated during a dry run such as a JavaScript binding, for example."),(0,o.kt)("p",null,"Consider the following where you want to source a space delmited list of values from a script binding and loop over each value, making each one available to a step definition."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{11,14-15} showLineNumbers","{11,14-15}":!0,showLineNumbers:!0},"  @StepDef\n  Scenario: I perform step one\n    When I do this thing\n    \n  @StepDef\n  Scenario: I perform step two\n    When I do that thing\n\n  @StepDef\n  Scenario: I perform step\n    Given I perform step ${name}\n\n  Scenario: Process each value\n    Given names is defined by js \"$('.name').toArray().join(' ')\"\n     When I perform step for each name in names delimited by \" \"\n     Then ..\n")),(0,o.kt)("p",null,"The highlighted step on line 11 would fail in a dry run scenario, reslting in an unsupported or underfined step error because it would have resolved to the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin"},"   Given I perform step $[dryValue:javascript]\n")),(0,o.kt)("p",null,"In this instance, Gwen has substituted the ",(0,o.kt)("inlineCode",{parentName:"p"},"$[dryValue:javascript]")," placeholder value for the ",(0,o.kt)("inlineCode",{parentName:"p"},"names")," javascript binding on line 14 which cannot be evaluated during a dry run. This placeholder value is then used in the ",(0,o.kt)("inlineCode",{parentName:"p"},"for each")," loop on line 15, and since it has no spaces in it, the entire placeholder value becomes the sole loop value."),(0,o.kt)("p",null,"The solution is to assign a dry run value to the javascript binding in our scenario as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{2}","{2}":!0},"  Scenario: Process each value\n    Given names is defined by js \"$('.name').toArray().join(' ')\"    @DryRun(name='names',value='one two')\n     When I perform step for each name in names delimited by \" \"\n     Then ..\n")),(0,o.kt)("p",null,"Note: If you're using the ",(0,o.kt)("a",{parentName:"p",href:"/docs/advanced/doc-strings"},"docstring")," synax for your binding, you could do it like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{2-5}","{2-5}":!0},"  Scenario: Process each value\n    Given names is defined by js    @DryRun(name='names',value='one two')\n          \"\"\"\n          $('.name').toArray().join(' ')\n          \"\"\"\n     When I perform step for each name in names delimited by \" \"\n     Then ..\n")),(0,o.kt)("p",null,"Now when you do a dry run, the ",(0,o.kt)("inlineCode",{parentName:"p"},"names")," reference will take on the value ",(0,o.kt)("inlineCode",{parentName:"p"},"one two")," and both our step definitions will be called:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin"},"  Given I perform step one\n  Given I perform step two\n")),(0,o.kt)("p",null,"This would result in a successful call to both the step definitions. So both will be exercised in the dry run."))}m.isMDXComponent=!0},4314:function(e,n,t){n.Z=t.p+"assets/images/sample-html-dry-run-error-58c7602e7bc964072748e8be38799f33.png"}}]);