"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3202],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=s(t),m=a,f=c["".concat(u,".").concat(m)]||c[m]||p[m]||o;return t?r.createElement(f,l(l({ref:n},d),{},{components:t})):r.createElement(f,l({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=c;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5162:function(e,n,t){t.d(n,{Z:function(){return l}});var r=t(7294),a=t(4334),o="tabItem_Ymn6";function l(e){var n=e.children,t=e.hidden,l=e.className;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,l),hidden:t},n)}},4866:function(e,n,t){t.d(n,{Z:function(){return N}});var r=t(3117),a=t(7294),o=t(4334),l=t(6775),i=t(1980),u=t(7392),s=t(12);function d(e){return function(e){var n,t;return null!=(n=null==(t=a.Children.map(e,(function(e){if(!e||(0,a.isValidElement)(e)&&(n=e.props)&&"object"==typeof n&&"value"in n)return e;var n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:t.filter(Boolean))?n:[]}(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}function p(e){var n=e.values,t=e.children;return(0,a.useMemo)((function(){var e=null!=n?n:d(t);return function(e){var n=(0,u.l)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function c(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function m(e){var n=e.queryString,t=void 0!==n&&n,r=e.groupId,o=(0,l.k6)(),u=function(e){var n=e.queryString,t=void 0!==n&&n,r=e.groupId;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=r?r:null}({queryString:t,groupId:r});return[(0,i._X)(u),(0,a.useCallback)((function(e){if(u){var n=new URLSearchParams(o.location.search);n.set(u,e),o.replace(Object.assign({},o.location,{search:n.toString()}))}}),[u,o])]}function f(e){var n,t,r,o,l=e.defaultValue,i=e.queryString,u=void 0!==i&&i,d=e.groupId,f=p(e),h=(0,a.useState)((function(){return function(e){var n,t=e.defaultValue,r=e.tabValues;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:r}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+r.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}var a=null!=(n=r.find((function(e){return e.default})))?n:r[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:l,tabValues:f})})),b=h[0],v=h[1],y=m({queryString:u,groupId:d}),k=y[0],g=y[1],w=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:d}.groupId),t=(0,s.Nk)(n),r=t[0],o=t[1],[r,(0,a.useCallback)((function(e){n&&o.set(e)}),[n,o])]),N=w[0],T=w[1],x=function(){var e=null!=k?k:N;return c({value:e,tabValues:f})?e:null}();return(0,a.useLayoutEffect)((function(){x&&v(x)}),[x]),{selectedValue:b,selectValue:(0,a.useCallback)((function(e){if(!c({value:e,tabValues:f}))throw new Error("Can't select invalid tab value="+e);v(e),g(e),T(e)}),[g,T,f]),tabValues:f}}var h=t(2466),b=t(2389),v="tabList__CuJ",y="tabItem_LNqP";function k(e){var n=e.className,t=e.block,l=e.selectedValue,i=e.selectValue,u=e.tabValues,s=[],d=(0,h.o5)().blockElementScrollPositionUntilNextRender,p=function(e){var n=e.currentTarget,t=s.indexOf(n),r=u[t].value;r!==l&&(d(n),i(r))},c=function(e){var n,t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":var r,a=s.indexOf(e.currentTarget)+1;t=null!=(r=s[a])?r:s[0];break;case"ArrowLeft":var o,l=s.indexOf(e.currentTarget)-1;t=null!=(o=s[l])?o:s[s.length-1]}null==(n=t)||n.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},u.map((function(e){var n=e.value,t=e.label,i=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:function(e){return s.push(e)},onKeyDown:c,onClick:p},i,{className:(0,o.Z)("tabs__item",y,null==i?void 0:i.className,{"tabs__item--active":l===n})}),null!=t?t:n)})))}function g(e){var n=e.lazy,t=e.children,r=e.selectedValue,o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){var l=o.find((function(e){return e.props.value===r}));return l?(0,a.cloneElement)(l,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})})))}function w(e){var n=f(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",v)},a.createElement(k,(0,r.Z)({},e,n)),a.createElement(g,(0,r.Z)({},e,n)))}function N(e){var n=(0,b.Z)();return a.createElement(w,(0,r.Z)({key:String(n)},e))}},9944:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return p}});var r=t(3117),a=t(102),o=(t(7294),t(3905)),l=(t(9960),t(4866),t(5162),t(4996),["components"]),i={toc_min_heading_level:2,toc_max_heading_level:3},u="Dry Runs",s={unversionedId:"modes/dry-runs",id:"modes/dry-runs",title:"Dry Runs",description:"Since v1.0.0",source:"@site/docs/10-modes/05-dry-runs.mdx",sourceDirName:"10-modes",slug:"/modes/dry-runs",permalink:"/docs/modes/dry-runs",draft:!1,editUrl:"https://github.com/gwen-interpreter/gwen-interpreter.github.io/edit/master/docs/10-modes/05-dry-runs.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{toc_min_heading_level:2,toc_max_heading_level:3},sidebar:"tutorialSidebar",previous:{title:"Parallel",permalink:"/docs/modes/parallel"},next:{title:"Data Driven",permalink:"/docs/modes/data-driven"}},d={},p=[{value:"Catch syntax and binding errors",id:"catch-syntax-and-binding-errors",level:2},{value:"Example",id:"example",level:4},{value:"DryRun Annotations",id:"dryrun-annotations",level:2},{value:"Example",id:"example-1",level:4},{value:"A non-ideal workaround",id:"a-non-ideal-workaround",level:4},{value:"Single Values",id:"single-values",level:3},{value:"Multiple Values",id:"multiple-values",level:3},{value:"Delimited Values",id:"delimited-values",level:3}],c={toc:p};function m(e){var n=e.components,i=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"dry-runs"},"Dry Runs"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Since ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v1.0.0"},"v1.0.0"))),(0,o.kt)("h2",{id:"catch-syntax-and-binding-errors"},"Catch syntax and binding errors"),(0,o.kt)("p",null,"Dry runs can be performed on features to verify that they are syntactically correct and that all references have bindings that will resolve at runtime. This allows you to quickly validate features and catch potential errors before committing them to an execution cycle. The ",(0,o.kt)("a",{parentName:"p",href:"/docs/cli#gwen-cli-options-dry-run"},(0,o.kt)("inlineCode",{parentName:"a"},"-n|--dry-run"))," CLI option is used to launch Gwen in this mode."),(0,o.kt)("p",null,"The primary purpose of dry runs is to perform static validation of all syntax, bindings and ",(0,o.kt)("a",{parentName:"p",href:"/docs/meta#stepdefs"},"StepDefs")," throughout your feature and ",(0,o.kt)("a",{parentName:"p",href:"/docs/meta"},"meta")," files. In a dry run:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Browsers sessions are never started"),(0,o.kt)("li",{parentName:"ul"},"Web pages are never loaded (and web elements can therefore cannot be accessed)"),(0,o.kt)("li",{parentName:"ul"},"Non static bindings are never evaluated"),(0,o.kt)("li",{parentName:"ul"},"JavaScript is never evaluated"),(0,o.kt)("li",{parentName:"ul"},"System processes are never evaluated"),(0,o.kt)("li",{parentName:"ul"},"Databases are never accessed")),(0,o.kt)("p",null,"Results will be logged to the console and in ",(0,o.kt)("a",{parentName:"p",href:"/docs/reports/html"},"HTML reports")," that you can inspect to find discovered issues."),(0,o.kt)("h4",{id:"example"},"Example"),(0,o.kt)("p",null,"If you leave out or forget to define a selector for an input field, it would be detected by a dry run and reported in the HTML report as follows:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Example dry run with error",src:t(4314).Z,width:"1588",height:"1118"})),(0,o.kt)("h2",{id:"dryrun-annotations"},"DryRun Annotations"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Since ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.55.0"},"v3.55.0"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@DryRun")," annotations can be used on any step to assign a value (or values) to a named reference at dry-runtime and are very useful when: "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"You want to exercise a step definition over a fixed set of inputs"),(0,o.kt)("li",{parentName:"ul"},"Or a reference to a binding cannot be evaluated and causes failures that otherwise would not occur outside of a dry run")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"DryRun annotations are only honoured in dry run evaluations and are completely ignored otherwise!")),(0,o.kt)("h4",{id:"example-1"},"Example"),(0,o.kt)("p",null,"Consider a ",(0,o.kt)("a",{parentName:"p",href:"/docs/meta"},"meta")," file with the following step definitions:"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"meta file")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin"},'  @StepDef\n  Scenario: I perform step 1\n    Then number should be "1"\n\n  @StepDef\n  Scenario: I perform step 2\n    Then number should not be "1"\n')),(0,o.kt)("p",null,"Consider the following scenario where you might want to call the 1st or 2nd step definition depending on the value contained in some number displayed on a web page."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"feature file")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{2}","{2}":!0},'  Given number can be located by css ".n"\n   When I perform step ${number}\n   Then ..\n')),(0,o.kt)("p",null,"This would work perfectly fine when ",(0,o.kt)("inlineCode",{parentName:"p"},"${number}")," evaluates to 1 or 2 in a web page loaded in a browser. However during a dry run, browsers sessions are never started, web pages are never loaded and looking up web elements and fetching their values is therfore not possible. The 2nd step above would fail since the number in the web element is nowhere to be found. In this instance, the standard Gwen behavior is to return a dry run placeholder value of ",(0,o.kt)("inlineCode",{parentName:"p"},"$[dryValue:webElementText]"),". That step on the 2nd line would resolve to the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin"},"  When I perform step $[dryValue:webElementText]\n")),(0,o.kt)("p",null,"This would result in an undefined step error being reported since it cannot be matched to any step definition in our meta."),(0,o.kt)("h4",{id:"a-non-ideal-workaround"},"A non-ideal workaround"),(0,o.kt)("p",null,"Before ",(0,o.kt)("inlineCode",{parentName:"p"},"@DryRun")," annotations were introduced, one way to work around this problem involved introducing predicates and using those as guards on calls to each step definition explicitly as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{2-5}","{2-5}":!0},'  Given number can be located by css ".n"\n    And number 1 is defined by js "${number} == 1"\n    And number 2 is defined by js "${number} == 2"\n   When I perform step 1 if number 1\n    And I perform step 2 if number 2\n   Then ..\n')),(0,o.kt)("p",null,"This effectively works since Gwen always resolves predicates to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," values in dry runs. However, this is not ideal because it forces you to break your abstraction and introduces unwanted redundancies. This is the primary reason why ",(0,o.kt)("inlineCode",{parentName:"p"},"@DryRun")," annotations were introduced; to avoid this kind of workaround."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Use DryRun annotations to manage dry run values and preserve your abstractions.")),(0,o.kt)("h3",{id:"single-values"},"Single Values"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Annotation synax: ",(0,o.kt)("inlineCode",{parentName:"p"},"@DryRun(name='<name>',value='<value>')"))),(0,o.kt)("p",null,"The solution is to provide a dry run value for the ",(0,o.kt)("inlineCode",{parentName:"p"},"number")," reference in the step using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@DryRun")," annotation as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{2}","{2}":!0},"  Given number can be located by css \".n\"\n   When I perform step ${number}    @DryRun(name='number',value='1')\n   Then ..\n")),(0,o.kt)("p",null,"Now when you do a dry run on this, the ",(0,o.kt)("inlineCode",{parentName:"p"},"${number}")," reference will take on the value ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," and resolve to the following step:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin"},"  When I perform step 1\n")),(0,o.kt)("p",null,"This would result in a successful dry run of the 1st step definition."),(0,o.kt)("h3",{id:"multiple-values"},"Multiple Values"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Annotation synax: ",(0,o.kt)("inlineCode",{parentName:"p"},"@DryRun(name='<name>',value={'<value-1>','<value-2>','<value-N>'})"))),(0,o.kt)("p",null,"What if we wanted to exercise both step definitions 1 and 2 in the meta? The solution is to provide multiple dry run values for ",(0,o.kt)("inlineCode",{parentName:"p"},"number")," on the calling step using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@DryRun")," annotation as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{2} showLineNumbers","{2}":!0,showLineNumbers:!0},"  Given number can be located by css \".n\"\n   When I perform step ${number}    @DryRun(name='number',value={'1','2'})\n   Then ..\n")),(0,o.kt)("p",null,"Now when you perform a dry run on this, the ",(0,o.kt)("inlineCode",{parentName:"p"},"${number}")," reference will take on the value ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," followed by ",(0,o.kt)("inlineCode",{parentName:"p"},"2")," and the step on line 2 above will be expanded in-place into the following two steps:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin"},"  When I perform step 1\n  When I perform step 2\n")),(0,o.kt)("p",null,"This will result in a successful dry run of both the 1st and 2nd step definitions. So now the entire meta and feature will be exercised."),(0,o.kt)("h3",{id:"delimited-values"},"Delimited Values"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Annotation synax: ",(0,o.kt)("inlineCode",{parentName:"p"},"@DryRun(name='<name>',value='<value-1> <value-2> <value-N>')")," (space delimited example)")),(0,o.kt)("p",null,"Similarly, you can also assign a dry run value to any binding that cannot be evaluated during a dry run such as a JavaScript binding, for example."),(0,o.kt)("p",null,"Consider the following where you want to source a space delmited list of numbers from a script and loop over each one and call the step definition with that number."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"meta file")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{10-11} showLineNumbers","{10-11}":!0,showLineNumbers:!0},'  @StepDef\n  Scenario: I perform step 1\n    Then number should be "1"\n    \n  @StepDef\n  Scenario: I perform step 2\n    Then number should not be "1"\n\n  Scenario: Perform all steps\n    Given numbers is defined by js "$(\'.n\').toArray().join(\' \')"\n     When I perform step ${number} for each number in numbers delimited by " "\n     Then ..\n')),(0,o.kt)("p",null,"The call to the step in the loop on line 11 would fail in a dry run scenario, resulting in an undefined step error because it would resolve to the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin"},"   When I perform step $[dryValue:javascript]\n")),(0,o.kt)("p",null,"In this instance, Gwen will have assigned the ",(0,o.kt)("inlineCode",{parentName:"p"},"$[dryValue:javascript]")," placeholder value to the ",(0,o.kt)("inlineCode",{parentName:"p"},"numbers")," binding on line 10 since it is defined with a JavaScript expression which cannot be evaluated in a dry run. This placeholder value would then used to feed the loop, and since it has no spaces in it, the entire value itself becomes the sole undelimited value."),(0,o.kt)("p",null,"The solution is to assign a dry run value of ",(0,o.kt)("inlineCode",{parentName:"p"},"1 2")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"numbers")," binding as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{1}","{1}":!0}," Given numbers is defined by js \"$('.n').toArray().join(' ')\"   @DryRun(name='numbers',value='1 2')\n  When I perform step ${number} for each number in numbers delimited by \" \"\n  Then ..\n")),(0,o.kt)("p",null,"Note: If you're using the ",(0,o.kt)("a",{parentName:"p",href:"/docs/advanced/doc-strings"},"DocString")," synax, you can do it like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin",metastring:"{1-4}","{1-4}":!0},"  Given numbers is defined by js    @DryRun(name='numbers',value='1 2')\n        \"\"\"\n        $('.n').toArray().join(' ')\n        \"\"\"\n    When I perform step ${number} for each number in numbers delimited by \" \"\n    Then ..\n")),(0,o.kt)("p",null,"Now when you perform a dry run, the ",(0,o.kt)("inlineCode",{parentName:"p"},"numbers")," reference will take on the value ",(0,o.kt)("inlineCode",{parentName:"p"},"1 2")," and both our step definitions will be called in the the loop:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gherkin"},"  When I perform step 1\n  When I perform step 2\n")),(0,o.kt)("p",null,"This will result in a successful dry run of both step definitions."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You can also source values from settings in annoations using the ",(0,o.kt)("inlineCode",{parentName:"p"},"${setting.name}")," syntax in the ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," attribute, should you wish to externalise your dry run values.")))}m.isMDXComponent=!0},4314:function(e,n,t){n.Z=t.p+"assets/images/sample-html-dry-run-error-58c7602e7bc964072748e8be38799f33.png"}}]);