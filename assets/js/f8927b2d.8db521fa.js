"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[359],{6056:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return d},default:function(){return g}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=n(5064),l=n(8215),s=["components"],p={sidebar_position:3},u="Using Gwen",c={unversionedId:"using-gwen",id:"using-gwen",isDocsHomePage:!1,title:"Using Gwen",description:"Once you have installed Gwen and initialised a working directory, achieving automation is a three step process:",source:"@site/docs/using-gwen.mdx",sourceDirName:".",slug:"/using-gwen",permalink:"/docs/using-gwen",editUrl:"https://github.com/gwen-interpreter/gwen-interpreter.github.io/gwen-web/docs/using-gwen.mdx",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Get Started",permalink:"/docs/get-started"},next:{title:"Settings",permalink:"/docs/configuration/settings"}},d=[{value:"1. Declare Features",id:"1-declare-features",children:[]},{value:"2. Compose Meta",id:"2-compose-meta",children:[]},{value:"3. Launch Gwen",id:"3-launch-gwen",children:[]}],m={toc:d};function g(e){var t=e.components,n=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"using-gwen"},"Using Gwen"),(0,r.kt)("p",null,"Once you have installed Gwen and initialised a working directory, achieving automation is a three step process:"),(0,r.kt)("h2",{id:"1-declare-features"},"1. Declare Features"),(0,r.kt)("p",null,"Write ",(0,r.kt)("a",{parentName:"p",href:"https://cucumber.io/docs/gherkin/reference/#feature"},"feature specs")," to describe the intented behaviour in a declarative manner without giving any thought to automation."),(0,r.kt)("p",null,"For example, create a new todo.feature file with the following content in your gwen/features folder."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"File: gwen/features/todo.feature")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gherkin"},"Feature: Todo\n \n  Scenario: Create todo list\n    Given a new todo list\n     When the following items are added\n          | Item          |\n          | Get the milk  |\n          | Walk the dog  |\n     Then the list will contain 2 items\n")),(0,r.kt)("h2",{id:"2-compose-meta"},"2. Compose Meta"),(0,r.kt)("p",null,"Write associated ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen/wiki/Meta-Features"},"meta specs")," to define the step definitions for all steps in your features."),(0,r.kt)("p",null,"Each step definition is defined as a ",(0,r.kt)("inlineCode",{parentName:"p"},"@StepDef")," annotated scenario with a name that matches the calling step and contains one or more steps that call out to other step definitions or predefined Gwen ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen-web/wiki/Supported-DSL"},"Web DSL")," steps that perform the prescribed browser operations. Steps containing ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen/wiki/Data-Tables"},"Data tables")," can also be mapped to step definitions using the ",(0,r.kt)("inlineCode",{parentName:"p"},"@ForEach")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"@DataTable")," annotations as shown in the example. Inputs to steps can also be parameterised using the ",(0,r.kt)("inlineCode",{parentName:"p"},"<param>")," syntax and resolved with ",(0,r.kt)("inlineCode",{parentName:"p"},"$<param>"),"."),(0,r.kt)("p",null,"For example, create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"todo.meta")," file with the following content in your ",(0,r.kt)("em",{parentName:"p"},"gwen/features")," folder. "),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Associative Meta:")," By default, Gwen will associate and bind same named ",(0,r.kt)("inlineCode",{parentName:"p"},"*.meta")," files to same named ",(0,r.kt)("inlineCode",{parentName:"p"},"*.feature")," files ",(0,r.kt)("strong",{parentName:"p"},"only")," when it discovers such pairs in the same directory!")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"File: gwen/features/todo.meta")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gherkin"},'Feature: Todo Meta (automation glue)\n\n  @StepDef\n  Scenario: a new todo list\n       When I navigate to "http://todomvc.com/examples/react"\n       Then the todo field can be located by class "new-todo"\n        And count can be located by css ".todo-count strong"\n                        \n  @StepDef\n  @ForEach\n  @DataTable(header="top")\n  Scenario: the following items are added\n       When I enter data[Item] in the todo field\n\n  @StepDef\n  Scenario: the list will contain <expected> items\n       Then count should be "$<expected>"\n')),(0,r.kt)("h2",{id:"3-launch-gwen"},"3. Launch Gwen"),(0,r.kt)("p",null,"Launch Gwen in your project root directory to execute your features!"),(0,r.kt)(i.Z,{defaultValue:"npm",values:[{label:"npm",value:"npm"},{label:"Yarn",value:"yarn"},{label:"Standalone",value:"standalone"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("p",null,"Execute all features"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"npm run gwen -b /gwen/features\n")),(0,r.kt)("p",null,"Execute one feature"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"npm run gwen -b /gwen/features/todo.feature\n"))),(0,r.kt)(l.Z,{value:"yarn",mdxType:"TabItem"},(0,r.kt)("p",null,"Execute all features"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"yarn gwen -b /gwen/features\n")),(0,r.kt)("p",null,"Execute one feature"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"yarn gwen -b /gwen/features/todo.feature\n"))),(0,r.kt)(l.Z,{value:"standalone",mdxType:"TabItem"},(0,r.kt)("p",null,"Execute all features"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"gwen -b /features\n")),(0,r.kt)("p",null,"Execute one feature"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"gwen -b /features/todo.feature\n")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"-b")," (",(0,r.kt)("inlineCode",{parentName:"p"},"--batch"),") switch tells Gwen to exit immediately after feature execution completes. Omitting it will open the interactive ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen/wiki/REPL-Console"},"Gwen REPL Console")," upon completion instead.")))}g.isMDXComponent=!0}}]);