"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[937],{927:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return d},default:function(){return h}});var o=n(7462),a=n(3366),i=(n(7294),n(3905)),r=(n(5064),n(8215),n(4996)),s=["components"],c={sidebar_position:1},u="Introduction",p={unversionedId:"introduction",id:"introduction",isDocsHomePage:!1,title:"Introduction",description:"Gwen",source:"@site/docs/introduction.mdx",sourceDirName:".",slug:"/introduction",permalink:"/docs/introduction",editUrl:"https://github.com/gwen-interpreter/gwen-interpreter.github.io/gwen-web/docs/introduction.mdx",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Get Started",permalink:"/docs/get-started"}},d=[{value:"Gwen",id:"gwen",children:[]},{value:"How it works",id:"how-it-works",children:[{value:"1. Declare your feature spec",id:"1-declare-your-feature-spec",children:[]},{value:"2. Compose your meta spec",id:"2-compose-your-meta-spec",children:[]},{value:"3. Execute your feature spec",id:"3-execute-your-feature-spec",children:[]}]}],l={toc:d};function h(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"introduction"},"Introduction"),(0,i.kt)("h2",{id:"gwen"},"Gwen"),(0,i.kt)("p",null,"Gwen is a ",(0,i.kt)("a",{parentName:"p",href:"https://cucumber.io/docs/gherkin/reference/"},"Gherkin")," interpreter that executes feature specs to automate web application testing or repetitive web processing through ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen/wiki/Meta-Features"},"meta specs")," that you compose with the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gwen-interpreter/gwen-web/wiki/Supported-DSL"},"Gwen DSL"),"."),(0,i.kt)("h2",{id:"how-it-works"},"How it works"),(0,i.kt)("h3",{id:"1-declare-your-feature-spec"},"1. Declare your feature spec"),(0,i.kt)("p",null,"Feature specs describe how a feature should behave and are often used by teams to document scenarios and/or examples in a clear and concise form."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gherkin"},"Feature: Todo List\n \n  Scenario: Create todo list\n    Given a new todo list\n     When the following items are added\n          | Item          |\n          | Get the milk  |\n          | Walk the dog  |\n     Then the list will contain 2 items\n")),(0,i.kt)("p",null,'Gwen aims to help make these exectuable "as is", primarily to drive automated testing consistently and reliably across browsers and platforms through a preprogrammed automation framework and Gherkin language.'),(0,i.kt)("h3",{id:"2-compose-your-meta-spec"},"2. Compose your meta spec"),(0,i.kt)("p",null,"Meta specs describe how feature specs will behave when executed by Gwen. They are written as Gherkin specs too but specify all the step definitions and bindings required for exeution only so your feature specs remain untouched and agnostic of these automation details."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gherkin"},'Feature: Todo List Testing Meta\n\n\n  @Context\n  @StepDef\n  Scenario: a new todo list\n       When I navigate to "http://todomvc.com/examples/react"\n       Then the todo field can be located by class "new-todo"\n        And count can be located by css ".todo-count strong"\n\n  @Action\n  @ForEach\n  @DataTable(header="top")\n  @StepDef\n  Scenario: the following items are added\n       When I enter data[Item] in the todo field\n\n  @Assertion\n  @StepDef\n  Scenario: the list will contain <expected> items\n       Then count should be "$<expected>"\n')),(0,i.kt)("p",null,"Each step definition is defined as a ",(0,i.kt)("inlineCode",{parentName:"p"},"@StepDef")," annotated scenario with a name that matches the corresponding step expression in the feature that that you want to bind it to. Each one calls out to one or more Gwen DSL steps which will perform the specified operations for you at execution time."),(0,i.kt)("p",null,"This example also uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"@ForEach")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@DataTable")," annotations to process each record in the data table of the 2nd step in the feature. It also accepts the number of expected items from the last step in the feature in a parameter placeholder named ",(0,i.kt)("inlineCode",{parentName:"p"},"<expected>"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@Context"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"@Action"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"@Assertion")," annotations on each step definition impose rules stipulating that each one of those can only be bound to either ",(0,i.kt)("inlineCode",{parentName:"p"},"Given"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"When"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"Then")," steps in features, respectively. Violations are then be reported as errors to help preserve correct behavioral semantics."),(0,i.kt)("h3",{id:"3-execute-your-feature-spec"},"3. Execute your feature spec"),(0,i.kt)("p",null,"When you launch Gwen, it will bind your meta to your feature execute it to achieve automation."),(0,i.kt)("img",{alt:"Featres + Meta In > Gwen > Automation Out",src:(0,r.Z)("/img/gwen-in-out.svg")}),(0,i.kt)("p",null,"Your meta governs what exectues and what Gwen will automate and this need not be confined to just browser based feature testing. You can use Gwen in the same manner to automate other similarly repetitive or manually intenstive web processing too."))}h.isMDXComponent=!0}}]);