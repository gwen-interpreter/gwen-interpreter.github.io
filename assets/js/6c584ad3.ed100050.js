"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4363],{1357:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>u,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>f,toc:()=>c});var r=n(4848),l=n(8453),t=n(8774),a=n(1470),i=n(9365);n(6025);const d={title:"CSV Reports",toc_min_heading_level:2,toc_max_heading_level:3},o="CSV Reports",f={id:"reports/csv",title:"CSV Reports",description:"Coming soon to v3.77.0",source:"@site/docs/12-reports/03-csv.mdx",sourceDirName:"12-reports",slug:"/reports/csv",permalink:"/docs/reports/csv",draft:!1,unlisted:!1,editUrl:"https://github.com/gwen-interpreter/gwen-interpreter.github.io/edit/master/docs/12-reports/03-csv.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"CSV Reports",toc_min_heading_level:2,toc_max_heading_level:3},sidebar:"tutorialSidebar",previous:{title:"Console Reports",permalink:"/docs/reports/console"},next:{title:"Screenshots",permalink:"/docs/reports/screenshots"}},u={},c=[{value:"Configuration",id:"configuration",level:2},{value:"Results files",id:"results-files",level:3},{value:"Results fields",id:"results-fields",level:3},{value:"Default configuration",id:"default-configuration",level:3},{value:"Results Annotation",id:"results-annotation",level:2},{value:"Syntax:",id:"syntax",level:3},{value:"Example:",id:"example",level:3},{value:"Logging Results",id:"logging-results",level:2}];function p(e){const s={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"csv-reports",children:"CSV Reports"})}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsxs)(s.p,{children:["Coming soon to ",(0,r.jsx)(s.a,{href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.77.0",children:"v3.77.0"})]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Gwen can also generate CSV reports for you."}),"\n",(0,r.jsx)(s.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsxs)(s.p,{children:["By default, Gwen will generate the following CSV files under ",(0,r.jsx)(s.code,{children:"reports/results"})," subdirectory in your configured ",(0,r.jsx)(s.a,{href:"/docs/settings#gwen-outDir",children:(0,r.jsx)(s.code,{children:"output"})})," directory, but you can completely reconfigure this to suit your own requirements:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Feature level results:","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"feature-results-PASSED.csv - A log of all passed feature results"}),"\n",(0,r.jsx)(s.li,{children:"feature-results-FAILED.csv - A log of all failed feature results including the failed reason"}),"\n",(0,r.jsx)(s.li,{children:"feature-results-ALL.csv - A log of all feature results (passed or failed) including the failed reason (for failed)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["Scenario level results:","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"scenario-results-PASSED.csv - A log of all passed scenario results"}),"\n",(0,r.jsx)(s.li,{children:"scenario-results-FAILED.csv - A log of all failed scenario results including the failed reason"}),"\n",(0,r.jsx)(s.li,{children:"scenario-results-ALL.csv - A log of all scenario results (passed or failed) including the failed reason (for failed)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"results-files",children:"Results files"}),"\n",(0,r.jsxs)(s.p,{children:["CSV files can be configured within the ",(0,r.jsx)(s.code,{children:"gwen.reports.results.files"})," element in your ",(0,r.jsx)(s.a,{href:"/docs/settings#settings-files",children:"settings file"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'<fileId> {\n  file = "<filename>" \n  scope = "[scope]"\n  status = "[status]"\n  fields = [\n    { name = "<fieldName 1>", ref = "[reference 1]", optional = [optionality 1], excludes = "[excludeFields 1]"}\n    { name = "<fieldName 2>", ref = "[reference 2]", optional = [optionality 2], excludes = "[excludeFields 2]" }\n    ..\n    { name = "<fieldName N>", ref = "[reference N]", optional = [optionality N], excludes = "[excludeFields N]" }\n  ]\n}\n'})}),"\n",(0,r.jsx)(s.p,{children:"Where:"}),"\n",(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:[(0,r.jsx)("code",{children:"<fileId>"})," - (Mandatory) Is an arbitatry Id for the file element"]}),(0,r.jsxs)("li",{children:[(0,r.jsxs)(s.p,{children:[(0,r.jsx)("code",{children:"<filename>"})," - (Mandatory) - Is the name or path to the target CSV file"]}),(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:["If a file name only is specified (without a prefixed path), then the named file will be written to the ",(0,r.jsx)(s.code,{children:"reports/results"})," subdirectory within your configured ",(0,r.jsx)(s.a,{href:"/docs/settings#gwen-outDir",children:(0,r.jsx)(s.code,{children:"output"})})," directory"]}),(0,r.jsx)("li",{children:"If the file name is prefixed with a path, then the named file will be written to that location"})]})]}),(0,r.jsxs)("li",{children:[(0,r.jsxs)(s.p,{children:[(0,r.jsx)("code",{children:"[scope]"})," - (Optional) is either:"]}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("code",{children:"Feature"})," - To log the results of all features to the CSV file as they complete.\n",(0,r.jsx)("ul",{children:(0,r.jsxs)("li",{children:["or ",(0,r.jsx)("code",{children:"Feature: <name>"})," - To log the results of a specifically named Feature only, where ",(0,r.jsx)("code",{children:"<name>"})," is the name of the Feature to log the results for. Alternatively, omit the scope attribute and place the ",(0,r.jsx)(s.a,{href:"#results-annotation",children:(0,r.jsx)(s.code,{children:"@Results"})})," annotation directly on the Feature itself in the feature or meta file to make it more explict and avoid potential name clashes (preferred approach)."]})})]})}),(0,r.jsx)("li",{children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("code",{children:"Rule"})," - To log the results of all rules to the CSV file as they complete.\n",(0,r.jsx)("ul",{children:(0,r.jsxs)("li",{children:["or ",(0,r.jsx)("code",{children:"Rule: <name>"})," - To log the results of a specifically named Rule only, where ",(0,r.jsx)("code",{children:"<name>"})," is the name of the Rule to log the results for. Alternatively, omit the scope attribute and place the ",(0,r.jsx)(s.a,{href:"#results-annotation",children:(0,r.jsx)(s.code,{children:"@Results"})})," annotation directly on the Rule itself in the feature or meta file to make it more explict and avoid potential name clashes (preferred approach)."]})})]})}),(0,r.jsx)("li",{children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("code",{children:"Scenario"})," - To log the results of all scenarios to the CSV file as they complete.\n",(0,r.jsx)("ul",{children:(0,r.jsxs)("li",{children:["or ",(0,r.jsx)("code",{children:"Scenario: <name>"})," - To log the results of a specifically named Scenario only, where ",(0,r.jsx)("code",{children:"<name>"})," is the name of the Scenario to log the results for. Alternatively, omit the scope attribute and place the ",(0,r.jsx)(s.a,{href:"#results-annotation",children:(0,r.jsx)(s.code,{children:"@Results"})})," annotation directly on the Scenario itself in the feature or meta file to make it more explict and avoid potential name clashes (preferred approach)."]})})]})}),(0,r.jsx)("li",{children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("code",{children:"Examples"})," - To log the results of all examples to the CSV file as they complete.\n",(0,r.jsx)("ul",{children:(0,r.jsxs)("li",{children:["or ",(0,r.jsx)("code",{children:"Examples: <name>"})," - To log the results of a specifically named Examples only, where ",(0,r.jsx)("code",{children:"<name>"})," is the name of the Examples to log the results for. Alternatively, omit the scope attribute and place the ",(0,r.jsx)(s.a,{href:"#results-annotation",children:(0,r.jsx)(s.code,{children:"@Results"})})," annotation directly on the Examples itself in the feature or meta file to make it more explict and avoid potential name clashes (preferred approach)."]})})]})}),(0,r.jsx)("li",{children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("code",{children:"StepDef"})," - To log the results of all ",(0,r.jsx)(t.A,{to:"/docs/meta#stepdefs",children:"StepDefs"})," to the CSV file as they complete.\n",(0,r.jsx)("ul",{children:(0,r.jsxs)("li",{children:["or ",(0,r.jsx)("code",{children:"StepDef: <name>"})," - To log the results of a specifically named StepDef only, where ",(0,r.jsx)("code",{children:"<name>"})," is the name of the StepDef to log the results for. Alternatively, omit the scope attribute and place the ",(0,r.jsx)(s.a,{href:"#results-annotation",children:(0,r.jsx)(s.code,{children:"@Results"})})," annotation directly on the StepDef itself in the feature or meta file to make it more explict and avoid potential name clashes (preferred approach)."]})})]})}),(0,r.jsxs)("li",{children:["Omit the scope to not log any results automatically; for when you want to explicitly control the scope and where the logging will occur using a ",(0,r.jsx)(s.a,{href:"#results-annotation",children:(0,r.jsx)(s.code,{children:"@Results"})})," annotation"]})]})]}),(0,r.jsxs)("li",{children:[(0,r.jsxs)(s.p,{children:[(0,r.jsx)("code",{children:"[status]"})," - (Optional) is either:"]}),(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:[(0,r.jsx)("code",{children:"Passed"})," - To log only passed results to the CSV file"]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("code",{children:"Failed"})," - To log only failed results to the CSV file"]}),(0,r.jsx)("li",{children:"Or blank to log passed or failed results to the CSV file"})]})]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("code",{children:"fields"})," - (Mandatory) - Contains an array of fields as described below"]})]}),"\n",(0,r.jsx)(s.h3,{id:"results-fields",children:"Results fields"}),"\n",(0,r.jsxs)(s.p,{children:["CSV fields are configured as arrays witihin the ",(0,r.jsx)(s.code,{children:"fields"})," attribute and have the following structure:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{ name = "<fieldName>", ref = "[reference]", optional = [optionality], excludes = "[excludeFields]" }\n'})}),"\n",(0,r.jsx)(s.p,{children:"Where:"}),"\n",(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:[(0,r.jsx)("code",{children:"<fieldName>"})," - (Mandatory) - Is the name of the field as it will appear in generated CSV"]}),(0,r.jsxs)("li",{children:[(0,r.jsxs)(s.p,{children:[(0,r.jsx)("code",{children:"[reference]"})," - (Optional) - Can be one of:"]}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"The name of a varaible in scope containing the value to bind"}),(0,r.jsxs)("li",{children:["If blank, will use the value bound to the variable of same name as ",(0,r.jsx)("code",{children:"<fieldName>"})]}),(0,r.jsxs)("li",{children:[(0,r.jsxs)(s.p,{children:["If ",(0,r.jsx)("code",{children:"<fieldName>"})," is set to ",(0,r.jsx)("code",{children:"*"}),", then:"]}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"This reference must specify a path to the CSV template file containing the names of all fields to bind in the first row (and the names of such fields will also be used as the binding references)"}),(0,r.jsxs)("li",{children:["Can also be set to the special reference ",(0,r.jsx)("code",{children:"$<gwen.options.dataFile>"})," which will resolve to the input CSV (data feed) file passed to Gwen via the ",(0,r.jsx)(s.a,{href:"/docs/cli#gwen-cli-options-input-data",children:(0,r.jsx)("code",{children:"-i|--input-data <file>"})})," CLI option. In the case all the fields present in the input file will be included and resolved by name."]})]})]})]})]}),(0,r.jsxs)("li",{children:[(0,r.jsxs)(s.p,{children:[(0,r.jsx)("code",{children:"[optionality]"})," - (Optional) - Can be either of:"]}),(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:[(0,r.jsx)("code",{children:"true"})," - (Default) - To make this field mandatory. Will result in an undefined binding error being raised at runtime if the field binding does does not exist (i.e: is not in scope) at the time the record is written. "]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("code",{children:"false"})," - To make this field optional. Will resolve to blank at runtime if the field binding does does not exist (i.e: is not in scope) at the time the record is written. "]})]})]}),(0,r.jsxs)("li",{children:[(0,r.jsxs)(s.p,{children:[(0,r.jsx)("code",{children:"[excludeFields]"})," - (Optional) - Comma separated list of fields to exclude when ",(0,r.jsx)("code",{children:"<fieldName>"})," is set to ",(0,r.jsx)("code",{children:"*"}),":"]}),(0,r.jsx)("ul",{children:(0,r.jsxs)("li",{children:["All fields in the template file (referred to by ",(0,r.jsx)("code",{children:"[reference]"}),") that match those in the excludes list will be excluded"]})})]})]}),"\n",(0,r.jsx)(s.h3,{id:"default-configuration",children:"Default configuration"}),"\n",(0,r.jsxs)(a.A,{groupId:"settings",defaultValue:"conf",values:[{label:"conf",value:"conf"},{label:"json",value:"json"},{label:"properties",value:"properties"}],children:[(0,r.jsx)(i.A,{value:"conf",children:(0,r.jsxs)(a.A,{groupId:"settings",defaultValue:"default",values:[{label:"default",value:"default"},{label:"redundant",value:"redundant"}],children:[(0,r.jsxs)(i.A,{value:"default",children:[(0,r.jsx)(s.p,{children:"In this configuration, fields are uniquely defined upfront and reused across file definitions."}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'gwen {\n  report {\n    results {\n      fields {\n        feature {\n          status = [\n            { field = "EVAL_STATUS", ref = "gwen.feature.eval.status.keyword.upperCased" }\n            { field = "EVAL_STARTED", ref = "gwen.feature.eval.started" }\n            { field = "EVAL_FINISHED", ref = "gwen.feature.eval.finished" }\n          ]\n          details = [\n            { field = "FEATURE_FILE", ref = "gwen.feature.file.path" }\n            { field = "FEATURE_NAME", ref = "gwen.feature.displayName" }\n          ]\n          duration = [\n            { field = "EVAL_DURATION", ref = "gwen.feature.eval.duration" }\n          ]\n          message = [\n            { field = "EVAL_MESSAGE", ref = "gwen.feature.eval.status.message" }\n          ]\n        }\n        scenario {\n          status = [\n            { field = "EVAL_STATUS", ref = "gwen.scenario.eval.status.keyword.upperCased" }\n            { field = "EVAL_STARTED", ref = "gwen.scenario.eval.started" }\n            { field = "EVAL_FINISHED", ref = "gwen.scenario.eval.finished" }\n          ]\n          details = [\n            ${gwen.report.results.fields.feature.details}\n            { field = "SCENARIO_NAME", ref = "gwen.scenario.displayName" }\n          ]\n          duration = [\n            { field = "EVAL_DURATION", ref = "gwen.scenario.eval.duration" }\n          ]\n          message = [\n            { field = "EVAL_MESSAGE", ref = "gwen.scenario.eval.status.message" }\n          ]\n        }\n        input {\n            data = [\n            { field = "*", ref = "$<gwen.options.dataFile>" }\n          ]\n        }\n      }\n      files {\n        feature {\n          passed {\n            file = "feature-results-PASSED.csv"\n            scope = "Feature"\n            status = "Passed"\n            fields = [ \n              ${gwen.report.results.fields.feature.status}\n              ${gwen.report.results.fields.feature.details}\n              ${gwen.report.results.fields.feature.duration}\n              ${gwen.report.results.fields.input.data}\n            ]\n          }\n          failed {\n            file = "feature-results-FAILED.csv"\n            scope = "Feature"\n            status = "Failed"\n            fields = [ \n              ${gwen.report.results.fields.feature.status}\n              ${gwen.report.results.fields.feature.details}\n              ${gwen.report.results.fields.feature.duration}\n              ${gwen.report.results.fields.input.data}\n              ${gwen.report.results.fields.feature.message}\n            ]\n          }\n          all {\n            file = "feature-results-ALL.csv"\n            scope = "Feature"\n            fields = [ \n              ${gwen.report.results.fields.feature.status}\n              ${gwen.report.results.fields.feature.details}\n              ${gwen.report.results.fields.feature.duration}\n              ${gwen.report.results.fields.input.data}\n              ${gwen.report.results.fields.feature.message}\n            ]\n          }\n        }\n        scenario {\n          passed {\n            file = "scenario-results-PASSED.csv"\n            scope = "Scenario"\n            status = "Passed"\n            fields = [\n              ${gwen.report.results.fields.scenario.status}\n              ${gwen.report.results.fields.scenario.details}\n              ${gwen.report.results.fields.scenario.duration}\n              ${gwen.report.results.fields.input.data}\n            ]\n          }\n          failed {\n            file = "scenario-results-FAILED.csv"\n            scope = "Scenario"\n            status = "Failed"\n            fields = [\n              ${gwen.report.results.fields.scenario.status}\n              ${gwen.report.results.fields.scenario.details}\n              ${gwen.report.results.fields.scenario.duration}\n              ${gwen.report.results.fields.input.data}\n              ${gwen.report.results.fields.scenario.message}\n            ]\n          }\n          all {\n            file = "scenario-results-ALL.csv"\n            scope = "Scenario"\n            fields = [\n              ${gwen.report.results.fields.scenario.status}\n              ${gwen.report.results.fields.scenario.details}\n              ${gwen.report.results.fields.scenario.duration}\n              ${gwen.report.results.fields.input.data}\n              ${gwen.report.results.fields.scenario.message}\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n'})})]}),(0,r.jsxs)(i.A,{value:"redundant",children:[(0,r.jsx)(s.p,{children:"In this configuration, fields are replicated across file definitions."}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'gwen {\n  report {\n    results {\n      files {\n        feature {\n          passed {\n            file = "feature-results-PASSED.csv"\n            scope = "Feature"\n            status = "Passed"\n            fields = [ \n              { field = "EVAL_STATUS", ref = "gwen.feature.eval.status.keyword.upperCased" }\n              { field = "EVAL_STARTED", ref = "gwen.feature.eval.started" }\n              { field = "EVAL_FINISHED", ref = "gwen.feature.eval.finished" }\n              { field = "FEATURE_FILE", ref = "gwen.feature.file.path" }\n              { field = "FEATURE_NAME", ref = "gwen.feature.displayName" }\n              { field = "EVAL_DURATION", ref = "gwen.feature.eval.duration" }\n              { field = "*", ref = "$<gwen.options.dataFile>" }\n            ]\n          }\n          failed {\n            file = "feature-results-FAILED.csv"\n            scope = "Feature"\n            status = "Failed"\n            fields = [ \n              { field = "EVAL_STATUS", ref = "gwen.feature.eval.status.keyword.upperCased" }\n              { field = "EVAL_STARTED", ref = "gwen.feature.eval.started" }\n              { field = "EVAL_FINISHED", ref = "gwen.feature.eval.finished" }\n              { field = "FEATURE_FILE", ref = "gwen.feature.file.path" }\n              { field = "FEATURE_NAME", ref = "gwen.feature.displayName" }\n              { field = "EVAL_DURATION", ref = "gwen.feature.eval.duration" }\n              { field = "*", ref = "$<gwen.options.dataFile>" }\n              { field = "EVAL_MESSAGE", ref = "gwen.feature.eval.status.message" }\n            ]\n          }\n          all {\n            file = "feature-results-ALL.csv"\n            scope = "Feature"\n            fields = [ \n              { field = "EVAL_STATUS", ref = "gwen.feature.eval.status.keyword.upperCased" }\n              { field = "EVAL_STARTED", ref = "gwen.feature.eval.started" }\n              { field = "EVAL_FINISHED", ref = "gwen.feature.eval.finished" }\n              { field = "FEATURE_FILE", ref = "gwen.feature.file.path" }\n              { field = "FEATURE_NAME", ref = "gwen.feature.displayName" }\n              { field = "EVAL_DURATION", ref = "gwen.feature.eval.duration" }\n              { field = "*", ref = "$<gwen.options.dataFile>" }\n              { field = "EVAL_MESSAGE", ref = "gwen.feature.eval.status.message" }\n            ]\n          }\n        }\n        scenario {\n          passed {\n            file = "scenario-results-PASSED.csv"\n            scope = "Scenario"\n            status = "Passed"\n            fields = [\n              { field = "EVAL_STATUS", ref = "gwen.scenario.eval.status.keyword.upperCased" }\n              { field = "EVAL_STARTED", ref = "gwen.scenario.eval.started" }\n              { field = "EVAL_FINISHED", ref = "gwen.scenario.eval.finished" }\n              { field = "FEATURE_FILE", ref = "gwen.feature.file.path" }\n              { field = "FEATURE_NAME", ref = "gwen.feature.displayName" }\n              { field = "SCENARIO_NAME", ref = "gwen.scenario.displayName" }\n              { field = "EVAL_DURATION", ref = "gwen.scenario.eval.duration" }\n              { field = "*", ref = "$<gwen.options.dataFile>" }\n            ]\n          }\n          failed {\n            file = "scenario-results-FAILED.csv"\n            scope = "Scenario"\n            status = "Failed"\n            fields = [\n              { field = "EVAL_STATUS", ref = "gwen.scenario.eval.status.keyword.upperCased" }\n              { field = "EVAL_STARTED", ref = "gwen.scenario.eval.started" }\n              { field = "EVAL_FINISHED", ref = "gwen.scenario.eval.finished" }\n              { field = "FEATURE_FILE", ref = "gwen.feature.file.path" }\n              { field = "FEATURE_NAME", ref = "gwen.feature.displayName" }\n              { field = "SCENARIO_NAME", ref = "gwen.scenario.displayName" }\n              { field = "EVAL_DURATION", ref = "gwen.scenario.eval.duration" }\n              { field = "*", ref = "$<gwen.options.dataFile>" }\n              { field = "EVAL_MESSAGE", ref = "gwen.scenario.eval.status.message" }\n            ]\n          }\n          all {\n            file = "scenario-results-ALL.csv"\n            scope = "Scenario"\n            fields = [\n              { field = "EVAL_STATUS", ref = "gwen.scenario.eval.status.keyword.upperCased" }\n              { field = "EVAL_STARTED", ref = "gwen.scenario.eval.started" }\n              { field = "EVAL_FINISHED", ref = "gwen.scenario.eval.finished" }\n              { field = "FEATURE_FILE", ref = "gwen.feature.file.path" }\n              { field = "FEATURE_NAME", ref = "gwen.feature.displayName" }\n              { field = "SCENARIO_NAME", ref = "gwen.scenario.displayName" }\n              { field = "EVAL_DURATION", ref = "gwen.scenario.eval.duration" }\n              { field = "*", ref = "$<gwen.options.dataFile>" }\n              { field = "EVAL_MESSAGE", ref = "gwen.scenario.eval.status.message" }\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n'})})]})]})}),(0,r.jsxs)(i.A,{value:"json",children:[(0,r.jsxs)(s.p,{children:["In this configuration, fields are replicated across file definitions (note: field reuse is only supported in ",(0,r.jsx)("code",{children:"conf"})," format and not ",(0,r.jsx)("code",{children:"json"}),")."]}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n  "gwen": {\n    "report": {\n      "results": {\n        "files": {\n          "feature": {\n            "passed": {\n              "file": "feature-results-PASSED.csv",\n              "scope": "Feature",\n              "status": "Passed",\n              "fields": [ \n                  { "field": "EVAL_STATUS", "ref": "gwen.feature.eval.status.keyword.upperCased" },\n                  { "field": "EVAL_STARTED", "ref": "gwen.feature.eval.started" },\n                  { "field": "EVAL_FINISHED", "ref": "gwen.feature.eval.finished" },\n                  { "field": "FEATURE_FILE", "ref": "gwen.feature.file.path" },\n                  { "field": "FEATURE_NAME", "ref": "gwen.feature.displayName" },\n                  { "field": "EVAL_DURATION", "ref": "gwen.feature.eval.duration" },\n                  { "field": "*", "ref": "$<gwen.options.dataFile>" }\n              ]\n            },\n            "failed": {\n              "file": "feature-results-FAILED.csv",\n              "scope": "Feature",\n              "status": "Failed",\n              "fields": [ \n                  { "field": "EVAL_STATUS", "ref": "gwen.feature.eval.status.keyword.upperCased" },\n                  { "field": "EVAL_STARTED", "ref": "gwen.feature.eval.started" },\n                  { "field": "EVAL_FINISHED", "ref": "gwen.feature.eval.finished" },\n                  { "field": "FEATURE_FILE", "ref": "gwen.feature.file.path" },\n                  { "field": "FEATURE_NAME", "ref": "gwen.feature.displayName" },\n                  { "field": "EVAL_DURATION", "ref": "gwen.feature.eval.duration" },\n                  { "field": "*", "ref": "$<gwen.options.dataFile>" },\n                  { "field": "EVAL_MESSAGE", "ref": "gwen.feature.eval.status.message" }\n              ]\n            },\n            "all": {\n              "file": "feature-results-ALL.csv",\n              "scope": "Feature",\n              "fields": [ \n                  { "field": "EVAL_STATUS", "ref": "gwen.feature.eval.status.keyword.upperCased" },\n                  { "field": "EVAL_STARTED", "ref": "gwen.feature.eval.started" },\n                  { "field": "EVAL_FINISHED", "ref": "gwen.feature.eval.finished" },\n                  { "field": "FEATURE_FILE", "ref": "gwen.feature.file.path" },\n                  { "field": "FEATURE_NAME", "ref": "gwen.feature.displayName" },\n                  { "field": "EVAL_DURATION", "ref": "gwen.feature.eval.duration" },\n                  { "field": "*", "ref": "$<gwen.options.dataFile>" },\n                  { "field": "EVAL_MESSAGE", "ref": "gwen.feature.eval.status.message" }\n              ]\n            }\n          },\n          "scenario": {\n            "passed": {\n              "file": "scenario-results-PASSED.csv",\n              "scope": "Scenario",\n              "status": "Passed",\n              "fields": [\n                  { "field": "EVAL_STATUS", "ref": "gwen.scenario.eval.status.keyword.upperCased" },\n                  { "field": "EVAL_STARTED", "ref": "gwen.scenario.eval.started" },\n                  { "field": "EVAL_FINISHED", "ref": "gwen.scenario.eval.finished" },\n                  { "field": "FEATURE_FILE", "ref": "gwen.feature.file.path" },\n                  { "field": "FEATURE_NAME", "ref": "gwen.feature.displayName" },\n                  { "field": "SCENARIO_NAME", "ref": "gwen.scenario.displayName" },\n                  { "field": "EVAL_DURATION", "ref": "gwen.scenario.eval.duration" },\n                  { "field": "*", "ref": "$<gwen.options.dataFile>" }\n              ]\n            },\n            "failed": {\n              "file": "scenario-results-FAILED.csv",\n              "scope": "Scenario",\n              "status": "Failed",\n              "fields": [\n                  { "field": "EVAL_STATUS", "ref": "gwen.scenario.eval.status.keyword.upperCased" },\n                  { "field": "EVAL_STARTED", "ref": "gwen.scenario.eval.started" },\n                  { "field": "EVAL_FINISHED", "ref": "gwen.scenario.eval.finished" },\n                  { "field": "FEATURE_FILE", "ref": "gwen.feature.file.path" },\n                  { "field": "FEATURE_NAME", "ref": "gwen.feature.displayName" },\n                  { "field": "SCENARIO_NAME", "ref": "gwen.scenario.displayName" },\n                  { "field": "EVAL_DURATION", "ref": "gwen.scenario.eval.duration" },\n                  { "field": "*", "ref": "$<gwen.options.dataFile>" },\n                  { "field": "EVAL_MESSAGE", "ref": "gwen.scenario.eval.status.message" }\n              ]\n            },\n            "all": {\n              "file": "scenario-results-ALL.csv",\n              "scope": "Scenario",\n              "fields": [\n                  { "field": "EVAL_STATUS", "ref": "gwen.scenario.eval.status.keyword.upperCased" },\n                  { "field": "EVAL_STARTED", "ref": "gwen.scenario.eval.started" },\n                  { "field": "EVAL_FINISHED", "ref": "gwen.scenario.eval.finished" },\n                  { "field": "FEATURE_FILE", "ref": "gwen.feature.file.path" },\n                  { "field": "FEATURE_NAME", "ref": "gwen.feature.displayName" },\n                  { "field": "SCENARIO_NAME", "ref": "gwen.scenario.displayName" },\n                  { "field": "EVAL_DURATION", "ref": "gwen.scenario.eval.duration" },\n                  { "field": "*", "ref": "$<gwen.options.dataFile>" },\n                  { "field": "EVAL_MESSAGE", "ref": "gwen.scenario.eval.status.message" }\n              ]\n            }\n          }\n        }\n      }\n    }\n  }\n}\n'})})]}),(0,r.jsxs)(i.A,{value:"properties",children:[(0,r.jsxs)(s.p,{children:["In this configuration, fields are replicated across file definitions (note: field reuse is only supported in ",(0,r.jsx)("code",{children:"conf"})," format and not ",(0,r.jsx)("code",{children:"properties"}),")."]}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-properties",children:"gwen.report.results.files.feature.passed.file   = feature-results-PASSED.csv\ngwen.report.results.files.feature.passed.scope  = Feature\ngwen.report.results.files.feature.passed.status = Passed\ngwen.report.results.files.feature.passed.fields.feature.status.01.field   = EVAL_STATUS\ngwen.report.results.files.feature.passed.fields.feature.status.01.ref     = gwen.feature.eval.status.keyword.upperCased\ngwen.report.results.files.feature.passed.fields.feature.status.02.field   = EVAL_STARTED\ngwen.report.results.files.feature.passed.fields.feature.status.02.ref     = gwen.feature.eval.started\ngwen.report.results.files.feature.passed.fields.feature.status.03.field   = EVAL_FINISHED\ngwen.report.results.files.feature.passed.fields.feature.status.03.ref     = gwen.feature.eval.finished\ngwen.report.results.files.feature.passed.fields.feature.details.01.field  = FEATURE_FILE\ngwen.report.results.files.feature.passed.fields.feature.details.01.ref    = gwen.feature.file.path\ngwen.report.results.files.feature.passed.fields.feature.details.02.field  = FEATURE_NAME\ngwen.report.results.files.feature.passed.fields.feature.details.02.ref    = gwen.feature.displayName\ngwen.report.results.files.feature.passed.fields.feature.duration.01.field = EVAL_DURATION\ngwen.report.results.files.feature.passed.fields.feature.duration.01.ref   = gwen.feature.eval.duration\ngwen.report.results.files.feature.passed.fields.input.data.01.field       = *\ngwen.report.results.files.feature.passed.fields.input.data.01.ref         = $<gwen.options.dataFile>\n\ngwen.report.results.files.feature.failed.file   = feature-results-FAILED.csv\ngwen.report.results.files.feature.failed.scope  = Feature\ngwen.report.results.files.feature.failed.status = Failed\ngwen.report.results.files.feature.failed.fields.feature.status.01.field   = EVAL_STATUS\ngwen.report.results.files.feature.failed.fields.feature.status.01.ref     = gwen.feature.eval.status.keyword.upperCased\ngwen.report.results.files.feature.failed.fields.feature.status.02.field   = EVAL_STARTED\ngwen.report.results.files.feature.failed.fields.feature.status.02.ref     = gwen.feature.eval.started\ngwen.report.results.files.feature.failed.fields.feature.status.03.field   = EVAL_FINISHED\ngwen.report.results.files.feature.failed.fields.feature.status.03.ref     = gwen.feature.eval.finished\ngwen.report.results.files.feature.failed.fields.feature.details.01.field  = FEATURE_FILE\ngwen.report.results.files.feature.failed.fields.feature.details.01.ref    = gwen.feature.file.path\ngwen.report.results.files.feature.failed.fields.feature.details.02.field  = FEATURE_NAME\ngwen.report.results.files.feature.failed.fields.feature.details.02.ref    = gwen.feature.displayName\ngwen.report.results.files.feature.failed.fields.feature.duration.01.field = EVAL_DURATION\ngwen.report.results.files.feature.failed.fields.feature.duration.01.ref   = gwen.feature.eval.duration\ngwen.report.results.files.feature.failed.fields.input.data.01.field       = *\ngwen.report.results.files.feature.failed.fields.input.data.01.ref         = $<gwen.options.dataFile>\ngwen.report.results.files.feature.failed.fields.feature.message.01.field  = EVAL_MESSAGE\ngwen.report.results.files.feature.failed.fields.feature.message.01.ref    = gwen.feature.eval.status.message\n\ngwen.report.results.files.feature.all.file   = feature-results-ALL.csv\ngwen.report.results.files.feature.all.scope  = Feature\ngwen.report.results.files.feature.all.fields.feature.status.01.field   = EVAL_STATUS\ngwen.report.results.files.feature.all.fields.feature.status.01.ref     = gwen.feature.eval.status.keyword.upperCased\ngwen.report.results.files.feature.all.fields.feature.status.02.field   = EVAL_STARTED\ngwen.report.results.files.feature.all.fields.feature.status.02.ref     = gwen.feature.eval.started\ngwen.report.results.files.feature.all.fields.feature.status.03.field   = EVAL_FINISHED\ngwen.report.results.files.feature.all.fields.feature.status.03.ref     = gwen.feature.eval.finished\ngwen.report.results.files.feature.all.fields.feature.details.01.field  = FEATURE_FILE\ngwen.report.results.files.feature.all.fields.feature.details.01.ref    = gwen.feature.file.path\ngwen.report.results.files.feature.all.fields.feature.details.02.field  = FEATURE_NAME\ngwen.report.results.files.feature.all.fields.feature.details.02.ref    = gwen.feature.displayName\ngwen.report.results.files.feature.all.fields.feature.duration.01.field = EVAL_DURATION\ngwen.report.results.files.feature.all.fields.feature.duration.01.ref   = gwen.feature.eval.duration\ngwen.report.results.files.feature.all.fields.input.data.01.field       = *\ngwen.report.results.files.feature.all.fields.input.data.01.ref         = $<gwen.options.dataFile>\ngwen.report.results.files.feature.all.fields.feature.message.01.field  = EVAL_MESSAGE\ngwen.report.results.files.feature.all.fields.feature.message.01.ref    = gwen.feature.eval.status.message\n\ngwen.report.results.files.scenario.passed.file   = scenario-results-PASSED.csv\ngwen.report.results.files.scenario.passed.scope  = Scenario\ngwen.report.results.files.scenario.passed.status = Passed\ngwen.report.results.files.scenario.passed.fields.scenario.status.01.field   = EVAL_STATUS\ngwen.report.results.files.scenario.passed.fields.scenario.status.01.ref     = gwen.scenario.eval.status.keyword.upperCased\ngwen.report.results.files.scenario.passed.fields.scenario.status.02.field   = EVAL_STARTED\ngwen.report.results.files.scenario.passed.fields.scenario.status.02.ref     = gwen.scenario.eval.started\ngwen.report.results.files.scenario.passed.fields.scenario.status.03.field   = EVAL_FINISHED\ngwen.report.results.files.scenario.passed.fields.scenario.status.03.ref     = gwen.scenario.eval.finished\ngwen.report.results.files.scenario.passed.fields.scenario.details.01.field  = FEATURE_FILE\ngwen.report.results.files.scenario.passed.fields.scenario.details.01.ref    = gwen.feature.file.path\ngwen.report.results.files.scenario.passed.fields.scenario.details.02.field  = FEATURE_NAME\ngwen.report.results.files.scenario.passed.fields.scenario.details.02.ref    = gwen.feature.displayName\ngwen.report.results.files.scenario.passed.fields.scenario.details.03.field  = SCENARIO_NAME\ngwen.report.results.files.scenario.passed.fields.scenario.details.03.ref    = gwen.scenario.displayName\ngwen.report.results.files.scenario.passed.fields.scenario.duration.01.field = EVAL_DURATION\ngwen.report.results.files.scenario.passed.fields.scenario.duration.01.ref   = gwen.scenario.eval.duration\ngwen.report.results.files.scenario.passed.fields.input.data.01.field        = *\ngwen.report.results.files.scenario.passed.fields.input.data.01.ref          = $<gwen.options.dataFile>\n\ngwen.report.results.files.scenario.failed.file   = scenario-results-FAILED.csv\ngwen.report.results.files.scenario.failed.scope  = Scenario\ngwen.report.results.files.scenario.failed.status = Failed\ngwen.report.results.files.scenario.failed.fields.scenario.status.01.field   = EVAL_STATUS\ngwen.report.results.files.scenario.failed.fields.scenario.status.01.ref     = gwen.scenario.eval.status.keyword.upperCased\ngwen.report.results.files.scenario.failed.fields.scenario.status.02.field   = EVAL_STARTED\ngwen.report.results.files.scenario.failed.fields.scenario.status.02.ref     = gwen.scenario.eval.started\ngwen.report.results.files.scenario.failed.fields.scenario.status.03.field   = EVAL_FINISHED\ngwen.report.results.files.scenario.failed.fields.scenario.status.03.ref     = gwen.scenario.eval.finished\ngwen.report.results.files.scenario.failed.fields.scenario.details.01.field  = FEATURE_FILE\ngwen.report.results.files.scenario.failed.fields.scenario.details.01.ref    = gwen.feature.file.path\ngwen.report.results.files.scenario.failed.fields.scenario.details.02.field  = FEATURE_NAME\ngwen.report.results.files.scenario.failed.fields.scenario.details.02.ref    = gwen.feature.displayName\ngwen.report.results.files.scenario.failed.fields.scenario.details.03.field  = SCENARIO_NAME\ngwen.report.results.files.scenario.failed.fields.scenario.details.03.ref    = gwen.scenario.displayName\ngwen.report.results.files.scenario.failed.fields.scenario.duration.01.field = EVAL_DURATION\ngwen.report.results.files.scenario.failed.fields.scenario.duration.01.ref   = gwen.scenario.eval.duration\ngwen.report.results.files.scenario.failed.fields.input.data.01.field        = *\ngwen.report.results.files.scenario.failed.fields.input.data.01.ref          = $<gwen.options.dataFile>\ngwen.report.results.files.scenario.failed.fields.scenario.message.01.field  = EVAL_MESSAGE\ngwen.report.results.files.scenario.failed.fields.scenario.message.01.ref    = gwen.scenario.eval.status.message\n\ngwen.report.results.files.scenario.all.file   = scenario-results-ALL.csv\ngwen.report.results.files.scenario.all.scope  = Scenario\ngwen.report.results.files.scenario.all.fields.scenario.status.01.field   = EVAL_STATUS\ngwen.report.results.files.scenario.all.fields.scenario.status.01.ref     = gwen.scenario.eval.status.keyword.upperCased\ngwen.report.results.files.scenario.all.fields.scenario.status.02.field   = EVAL_STARTED\ngwen.report.results.files.scenario.all.fields.scenario.status.02.ref     = gwen.scenario.eval.started\ngwen.report.results.files.scenario.all.fields.scenario.status.03.field   = EVAL_FINISHED\ngwen.report.results.files.scenario.all.fields.scenario.status.03.ref     = gwen.scenario.eval.finished\ngwen.report.results.files.scenario.all.fields.scenario.details.01.field  = FEATURE_FILE\ngwen.report.results.files.scenario.all.fields.scenario.details.01.ref    = gwen.feature.file.path\ngwen.report.results.files.scenario.all.fields.scenario.details.02.field  = FEATURE_NAME\ngwen.report.results.files.scenario.all.fields.scenario.details.02.ref    = gwen.feature.displayName\ngwen.report.results.files.scenario.all.fields.scenario.details.03.field  = SCENARIO_NAME\ngwen.report.results.files.scenario.all.fields.scenario.details.03.ref    = gwen.scenario.displayName\ngwen.report.results.files.scenario.all.fields.scenario.duration.01.field = EVAL_DURATION\ngwen.report.results.files.scenario.all.fields.scenario.duration.01.ref   = gwen.scenario.eval.duration\ngwen.report.results.files.scenario.all.fields.input.data.01.field        = *\ngwen.report.results.files.scenario.all.fields.input.data.01.ref          = $<gwen.options.dataFile>\ngwen.report.results.files.scenario.all.fields.scenario.message.01.field  = EVAL_MESSAGE\ngwen.report.results.files.scenario.all.fields.scenario.message.01.ref    = gwen.scenario.eval.status.message      \n"})})]})]}),"\n",(0,r.jsx)(s.h2,{id:"results-annotation",children:"Results Annotation"}),"\n",(0,r.jsx)(s.p,{children:"Used to log results to a file at a specific Feature, Rule, Scenario, StepDef, Scenaro Outline, or Examples node level."}),"\n",(0,r.jsx)(s.h3,{id:"syntax",children:"Syntax:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-gherkin",children:"@Results('<fileId>')\n"})}),"\n",(0,r.jsx)(s.p,{children:"Where:"}),"\n",(0,r.jsx)("ul",{children:(0,r.jsx)("li",{children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("code",{children:"<fileId>"})," - Is a configured file Id under the ",(0,r.jsx)(s.code,{children:"gwen.reports.results.files"})," settings element."]})})}),"\n",(0,r.jsx)(s.h3,{id:"example",children:"Example:"}),"\n",(0,r.jsxs)(s.p,{children:["The configuration for ",(0,r.jsx)(s.code,{children:"my.csv"})," might be defiend as follows in your ",(0,r.jsx)(s.a,{href:"/docs/settings#settings-files",children:"settings file"}),". Note that the ",(0,r.jsx)(s.code,{children:"scope"})," attribute is deliberately absent here, since we will using the ",(0,r.jsx)(s.code,{children:"Results"})," annotation to specify where the scope will be."]}),"\n",(0,r.jsx)("i",{children:"gwen.conf"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'gwen {\n  ..\n  reports {\n    results {\n      files {\n        my {\n          csv {\n            file = "file.csv"\n            fields = [\n              { field = "status",   ref = "gwen.scenario.eval.status.keyword.upperCased" }\n              { field = "name",     ref = "my name" }\n              { field = "job",      ref = "my job" }\n              { field = "duration", ref = "gwen.scenario.eval.duration" }\n            ]\n          }\n        }\n      }\n    }\n  }\n  ..\n}\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Specifying the ",(0,r.jsx)(s.code,{children:"@Results('my.csv')"})," annoation on a scenario, would then log to results to the configured file when the scenario completes.\nThe scope of the ",(0,r.jsx)(s.code,{children:"my.csv"})," file would then be bound to this Scenario."]}),"\n",(0,r.jsx)("i",{children:"my.feature"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-gherkin",metastring:"{3}",children:'Feature: My feature\n\n  @Results(\'my.csv\')\n  Scenario: My scenario\n    Given my name is "Gwen"\n      And my job is "Automation"\n      ..\n'})}),"\n",(0,r.jsx)(s.p,{children:"And the generated results file would then contain:"}),"\n",(0,r.jsx)("i",{children:"file.csv"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csv",children:"status,name,job,duration\nPASSED,Gwen,Automation,1ms\n"})}),"\n",(0,r.jsx)(s.p,{children:"When used on a Scenario Outline, each Examples scenario would be logged."}),"\n",(0,r.jsx)("i",{children:"my.feature"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-gherkin",metastring:"{3}",children:"Feature: My feature\n\n  @Results('my.csv')\n  Scenario Outline: My scenario\n    Given my name is <name>\n      And my job is <job>\n    Examples:\n      | name    | job        |\n      | Gwen    | Automation |\n      | Stacey  | Agent      |\n      ..\n"})}),"\n",(0,r.jsx)(s.p,{children:"The generated results file would then contain:"}),"\n",(0,r.jsx)("i",{children:"file.csv"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csv",children:"status,name,job,duration\nPASSED,Gwen,Automation,1ms\nPASSED,Gwen,Automation,2ms\n..\n"})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"@Results"})," annotation can also be used on Scenario Outlies in conjunction with the ",(0,r.jsx)(s.a,{href:"/docs/data-feeds#examples-annotation",children:"@Examples"})," annotation for the same effect."]}),"\n",(0,r.jsx)("i",{children:"my.meta"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-gherkin",metastring:"{4}",children:"Feature: My meta\n\n  @Examples('data-records.csv`)\n  @Results('my.csv')\n  Scenario Outline: My scenario\n    Given my name is <name>\n      And my job is <job>\n      ..\n"})}),"\n",(0,r.jsx)(s.h2,{id:"logging-results",children:"Logging Results"}),"\n",(0,r.jsxs)(s.p,{children:["With the above settings in place, CSV files containing evaluated results will automatiacally be logged when you launch Gwen to execute with the ",(0,r.jsx)(s.code,{children:"-f results"})," ",(0,r.jsx)(s.a,{href:"/docs/cli",children:"CLI"})," option."]}),"\n",(0,r.jsxs)(a.A,{groupId:"setup",defaultValue:"project",values:[{label:"Project",value:"project"},{label:"Standalone",value:"standalone"}],children:[(0,r.jsx)(i.A,{value:"project",children:(0,r.jsxs)(a.A,{groupId:"jstool",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"npm",value:"npm"},{label:"pnpm",value:"pnpm"}],children:[(0,r.jsx)(i.A,{value:"yarn",children:(0,r.jsxs)(s.admonition,{title:"Example",type:"note",children:[(0,r.jsxs)(s.p,{children:["Executing features in the ",(0,r.jsx)(s.code,{children:"gwen/features/todo"})," folder and log CSV reports."]}),(0,r.jsx)(s.p,{children:"To generate CSV files only"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-shell",children:"yarn gwen -b -f results gwen/features/todo\n"})}),(0,r.jsx)(s.p,{children:"To generate HTML reports and CSV files"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-shell",children:"yarn  -b f html,results gwen/features/todo\n"})}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/docs/cli",children:"Gwen CLI"})})]})}),(0,r.jsx)(i.A,{value:"npm",children:(0,r.jsxs)(s.admonition,{title:"Example",type:"note",children:[(0,r.jsxs)(s.p,{children:["Executing features in the ",(0,r.jsx)(s.code,{children:"gwen/features/todo"})," folder and log CSV reports."]}),(0,r.jsx)(s.p,{children:"To generate CSV files only"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-shell",children:"npm run gwen -- -b -f results gwen/features/todo\n"})}),(0,r.jsx)(s.p,{children:"To generate HTML reports and CSV files"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-shell",children:"npm run gwen -- -b f html,results gwen/features/todo\n"})}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/docs/cli",children:"Gwen CLI"})})]})}),(0,r.jsx)(i.A,{value:"pnpm",children:(0,r.jsxs)(s.admonition,{title:"Example",type:"note",children:[(0,r.jsxs)(s.p,{children:["Executing features in the ",(0,r.jsx)(s.code,{children:"gwen/features/todo"})," folder and log CSV reports."]}),(0,r.jsx)(s.p,{children:"To generate CSV files only"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-shell",children:"pnpm gwen -b -f results gwen/features/todo\n"})}),(0,r.jsx)(s.p,{children:"To generate HTML reports and CSV files"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-shell",children:"pnpm  -b f html,results gwen/features/todo\n"})}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/docs/cli",children:"Gwen CLI"})})]})})]})}),(0,r.jsx)(i.A,{value:"standalone",children:(0,r.jsxs)(a.A,{groupId:"os",defaultValue:"linux",values:[{label:"Linux",value:"linux"},{label:"Windows",value:"windows"}],children:[(0,r.jsx)(i.A,{value:"linux",children:(0,r.jsxs)(s.admonition,{title:"Example",type:"note",children:[(0,r.jsxs)(s.p,{children:["Executing features in the ",(0,r.jsx)(s.code,{children:"gwen/features/todo"})," folder and log CSV reports."]}),(0,r.jsx)(s.p,{children:"To generate CSV files only"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-shell",children:"gwen -b -f results features/todo\n"})}),(0,r.jsx)(s.p,{children:"To generate HTML reports and CSV files"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-shell",children:"gwen -b f html,results features/todo\n"})}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/docs/cli",children:"Gwen CLI"})})]})}),(0,r.jsx)(i.A,{value:"windows",children:(0,r.jsxs)(s.admonition,{title:"Example",type:"note",children:[(0,r.jsxs)(s.p,{children:["Executing features in the ",(0,r.jsx)(s.code,{children:"gwen/features/todo"})," folder and log CSV reports."]}),(0,r.jsx)(s.p,{children:"To generate CSV files only"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-shell",children:"gwen -b -f results features\\todo\n"})}),(0,r.jsx)(s.p,{children:"To generate HTML reports and CSV files"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-shell",children:"gwen -b f html,results features\\todo\n"})}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/docs/cli",children:"Gwen CLI"})})]})})]})})]}),"\n",(0,r.jsx)("b",{children:"Output"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["The CSV results logged to:","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"output/reports/results/"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["The HTML report will be generated at","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"output/reports/index.html"}),"."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},9365:(e,s,n)=>{n.d(s,{A:()=>a});n(6540);var r=n(4164);const l={tabItem:"tabItem_Ymn6"};var t=n(4848);function a(e){let{children:s,hidden:n,className:a}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,r.A)(l.tabItem,a),hidden:n,children:s})}},1470:(e,s,n)=>{n.d(s,{A:()=>v});var r=n(6540),l=n(4164),t=n(3104),a=n(6347),i=n(205),d=n(7485),o=n(1682),f=n(679);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:s}=e;return!!s&&"object"==typeof s&&"value"in s}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function c(e){const{values:s,children:n}=e;return(0,r.useMemo)((()=>{const e=s??function(e){return u(e).map((e=>{let{props:{value:s,label:n,attributes:r,default:l}}=e;return{value:s,label:n,attributes:r,default:l}}))}(n);return function(e){const s=(0,o.XI)(e,((e,s)=>e.value===s.value));if(s.length>0)throw new Error(`Docusaurus error: Duplicate values "${s.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[s,n])}function p(e){let{value:s,tabValues:n}=e;return n.some((e=>e.value===s))}function h(e){let{queryString:s=!1,groupId:n}=e;const l=(0,a.W6)(),t=function(e){let{queryString:s=!1,groupId:n}=e;if("string"==typeof s)return s;if(!1===s)return null;if(!0===s&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:s,groupId:n});return[(0,d.aZ)(t),(0,r.useCallback)((e=>{if(!t)return;const s=new URLSearchParams(l.location.search);s.set(t,e),l.replace({...l.location,search:s.toString()})}),[t,l])]}function g(e){const{defaultValue:s,queryString:n=!1,groupId:l}=e,t=c(e),[a,d]=(0,r.useState)((()=>function(e){let{defaultValue:s,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(s){if(!p({value:s,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${s}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return s}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:s,tabValues:t}))),[o,u]=h({queryString:n,groupId:l}),[g,w]=function(e){let{groupId:s}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(s),[l,t]=(0,f.Dv)(n);return[l,(0,r.useCallback)((e=>{n&&t.set(e)}),[n,t])]}({groupId:l}),x=(()=>{const e=o??g;return p({value:e,tabValues:t})?e:null})();(0,i.A)((()=>{x&&d(x)}),[x]);return{selectedValue:a,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);d(e),u(e),w(e)}),[u,w,t]),tabValues:t}}var w=n(2303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var E=n(4848);function m(e){let{className:s,block:n,selectedValue:r,selectValue:a,tabValues:i}=e;const d=[],{blockElementScrollPositionUntilNextRender:o}=(0,t.a_)(),f=e=>{const s=e.currentTarget,n=d.indexOf(s),l=i[n].value;l!==r&&(o(s),a(l))},u=e=>{let s=null;switch(e.key){case"Enter":f(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;s=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;s=d[n]??d[d.length-1];break}}s?.focus()};return(0,E.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":n},s),children:i.map((e=>{let{value:s,label:n,attributes:t}=e;return(0,E.jsx)("li",{role:"tab",tabIndex:r===s?0:-1,"aria-selected":r===s,ref:e=>d.push(e),onKeyDown:u,onClick:f,...t,className:(0,l.A)("tabs__item",x.tabItem,t?.className,{"tabs__item--active":r===s}),children:n??s},s)}))})}function A(e){let{lazy:s,children:n,selectedValue:t}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(s){const e=a.find((e=>e.props.value===t));return e?(0,r.cloneElement)(e,{className:(0,l.A)("margin-top--md",e.props.className)}):null}return(0,E.jsx)("div",{className:"margin-top--md",children:a.map(((e,s)=>(0,r.cloneElement)(e,{key:s,hidden:e.props.value!==t})))})}function j(e){const s=g(e);return(0,E.jsxs)("div",{className:(0,l.A)("tabs-container",x.tabList),children:[(0,E.jsx)(m,{...s,...e}),(0,E.jsx)(A,{...s,...e})]})}function v(e){const s=(0,w.A)();return(0,E.jsx)(j,{...e,children:u(e.children)},String(s))}},8453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>i});var r=n(6540);const l={},t=r.createContext(l);function a(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);