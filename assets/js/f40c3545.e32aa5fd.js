"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1407],{7746:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var r=s(4848),t=s(8453);s(8774),s(1470),s(9365),s(6025);const a={toc_min_heading_level:2,toc_max_heading_level:4},i="Assertions",o={id:"assertions",title:"Assertions",description:"Since v2.30.0",source:"@site/docs/16-assertions.mdx",sourceDirName:".",slug:"/assertions",permalink:"/docs/assertions",draft:!1,unlisted:!1,editUrl:"https://github.com/gwen-interpreter/gwen-interpreter.github.io/edit/master/docs/16-assertions.mdx",tags:[],version:"current",sidebarPosition:16,frontMatter:{toc_min_heading_level:2,toc_max_heading_level:4},sidebar:"tutorialSidebar",previous:{title:"Implicit Values",permalink:"/docs/implicit-values"},next:{title:"Doc Strings",permalink:"/docs/doc-strings"}},l={},d=[{value:"Assertion Modes",id:"assertion-modes",level:2},{value:"Hard assertions (default)",id:"hard-assertions-default",level:3},{value:"Soft assertions",id:"soft-assertions",level:3},{value:"Sustained assertions",id:"sustained-assertions",level:3},{value:"Default mode",id:"default-mode",level:3},{value:"Mode annotations",id:"mode-annotations",level:3},{value:"Message Annotation",id:"message-annotation",level:2},{value:"Example",id:"example",level:4},{value:"Cumulative Assertions",id:"cumulative-assertions",level:2},{value:"Usage",id:"usage",level:3},{value:"Resetting",id:"resetting",level:3},{value:"Implicit variables",id:"implicit-variables",level:3},{value:"Text Form",id:"text-form",level:4},{value:"JSON Form",id:"json-form",level:4}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"assertions",children:"Assertions"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Since ",(0,r.jsx)(n.a,{href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v2.30.0",children:"v2.30.0"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"assertion-modes",children:"Assertion Modes"}),"\n",(0,r.jsxs)(n.p,{children:["Assertion modes only apply to steps that perform ",(0,r.jsx)(n.a,{href:"/docs/dsl#assertions",children:"assertions"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"hard-assertions-default",children:"Hard assertions (default)"}),"\n",(0,r.jsx)(n.p,{children:"With hard assertions, the first assertion error to be detected will be reported as a failure and execution will halt."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Since ",(0,r.jsx)(n.a,{href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.43.0",children:"v3.43.0"}),", the ",(0,r.jsx)(n.code,{children:"@Hard"})," annotation can be used on any assertion step to make it fail hard."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gherkin",children:'  Then @Hard the page title should contain "xGwen automation"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Hard assertions report",src:s(7104).A+"",width:"1572",height:"1224"})}),"\n",(0,r.jsx)(n.h3,{id:"soft-assertions",children:"Soft assertions"}),"\n",(0,r.jsx)(n.p,{children:"With soft assertions, every assertion error that is detected is collected and reported as a failure without halting execution."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Since ",(0,r.jsx)(n.a,{href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.43.0",children:"v3.43.0"}),", the ",(0,r.jsx)(n.code,{children:"@Soft"})," annotation can be used on any assertion step to make it fail soft."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gherkin",children:'  Then @Soft the page title should contain "xGwen automation"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Soft assertions report",src:s(917).A+"",width:"1576",height:"1268"})}),"\n",(0,r.jsx)(n.h3,{id:"sustained-assertions",children:"Sustained assertions"}),"\n",(0,r.jsx)(n.p,{children:"With sustained assertions, every assertion error that is detected is collected and reported as a sustained errWithout halting execution or raising failure."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Since ",(0,r.jsx)(n.a,{href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.43.0",children:"v3.43.0"}),", the ",(0,r.jsx)(n.code,{children:"@Sustained"})," annotation can be used on any assertion step to make it sustained."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gherkin",children:'  Then @Sustained the page title should contain "xGwen automation"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Sustained assertions report",src:s(1933).A+"",width:"1568",height:"1260"})}),"\n",(0,r.jsx)(n.h3,{id:"default-mode",children:"Default mode"}),"\n",(0,r.jsx)(n.p,{children:"Hard, soft, or sustained assertions can be configured as the default through the following setting:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/settings#gwen-assertion-mode",children:(0,r.jsx)(n.code,{children:"gwen.assertion.mode"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["This setting controls whether or not hard, soft or sustained assertions are enabled by default. Valid values include:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hard"})," to halt execution on first assertion error and report failure (default)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"soft"})," to collect all assertion errors and continue execution whilst reporting them as failures"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sustained"})," to collect all assertion errors and continue execution without reporting them as failures"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"mode-annotations",children:"Mode annotations"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"@Hard"}),", ",(0,r.jsx)(n.code,{children:"@Soft"})," and ",(0,r.jsx)(n.code,{children:"@Sustained"})," annotations introduced in ",(0,r.jsx)(n.a,{href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.43.0",children:"v3.43.0"})," can be used on individiual steps to override the default assertion mode setting."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, if the ",(0,r.jsx)(n.a,{href:"/docs/settings#gwen-assertion-mode",children:(0,r.jsx)(n.code,{children:"gwen.assertion.mode"})})," setting is set to ",(0,r.jsx)(n.code,{children:"hard"}),", the following would perform a hard assertion since no overriding annotation is specified."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gherkin",children:'  Then the page title should contain "xGwen automation"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The following would also perform a hard assertion since the ",(0,r.jsx)(n.code,{children:"@Hard"})," annotatation is explicitly specified (although redundant)."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gherkin",children:'  Then @Hard the page title should contain "xGwen automation"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The following however, would perform a soft assertion since the ",(0,r.jsx)(n.code,{children:"@Soft"})," annotatation is specified."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gherkin",children:'  Then @Soft the page title should contain "xGwen automation"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Similarly, the following would perform a sustained assertion since the ",(0,r.jsx)(n.code,{children:"@Sustained"})," annotatation is specified."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gherkin",children:'  Then @Sustained the page title should contain "xGwen automation"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"message-annotation",children:"Message Annotation"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Since ",(0,r.jsx)(n.a,{href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.29.0",children:"v3.29.0"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"@Message"})," annotations can be used to override default error messages reported by failed assertions with custom messages to provide better meaning and context."]}),"\n",(0,r.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.p,{children:"Consider the following which checks that a form error should not be displayed on a page."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gherkin",metastring:"{2}",children:"  Given form error can be located by css `.form-error`\n   Then form error should not be displayed\n"})}),"\n",(0,r.jsx)(n.p,{children:"The assertion on line 2 will fail and report the following message if the error is displayed:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"assertion failed: form error should not be displayed"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The default message suggests that an error was displayed but it does not explain what the error was. To override this and provide a more informative message, add a ",(0,r.jsx)(n.code,{children:"@Message"})," annotation to the assertion as follows:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gherkin",metastring:"{2}",children:'  Given form error can be located by css `.form-error`\n   Then form error should not be displayed    @Message("Form error was: ${form error}")\n'})}),"\n",(0,r.jsx)(n.p,{children:"This will now output a more meaninful error and include the contents of the form error in it too."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example: ",(0,r.jsx)(n.code,{children:"Form error was: Please provide all mandatory fields"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"cumulative-assertions",children:"Cumulative Assertions"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Since ",(0,r.jsx)(n.a,{href:"https://github.com/gwen-interpreter/gwen-web/releases/tag/v3.61.0",children:"v3.61.0"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Error messages raised by a series ",(0,r.jsx)(n.a,{href:"#soft-assertions",children:"soft"})," or ",(0,r.jsx)(n.a,{href:"#sustained-assertions",children:"sustained"})," assertions can be aggregated into a single errWith a ",(0,r.jsx)(n.a,{href:"/docs/dsl#cumulative-asserts",children:"cumulative assert"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gherkin",metastring:"{4} showLineNumbers",children:'  Then @Soft x should not be blank\n   And @Soft y should be "1"\n   And @Soft z should be true\n   And there should be no accumulated errors\n'})}),"\n",(0,r.jsx)(n.p,{children:"Line 4 will pass if all the preceeding assertions pass. If however, the assertions on line 1 and 3 fail (and the one on line 2 passes), then it will raise an assertion error containing the two failed messages as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"2 errors:\n(1) x should not be blank\n(2) z should be true but got false\n"})}),"\n",(0,r.jsx)(n.h3,{id:"resetting",children:"Resetting"}),"\n",(0,r.jsxs)(n.p,{children:["You can also ",(0,r.jsx)(n.a,{href:"/docs/dsl#i-reset-accumulated-errors",children:"reset accumulated errors"})," if you need to start a new series of asserts. All currently accumulated errors will be cleared."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gherkin",children:"  And I reset accumulated errors\n"})}),"\n",(0,r.jsx)(n.h3,{id:"implicit-variables",children:"Implicit variables"}),"\n",(0,r.jsx)(n.h4,{id:"text-form",children:"Text Form"}),"\n",(0,r.jsxs)(n.p,{children:["Accumulated error messages can also be referenced through the implicit ",(0,r.jsx)(n.a,{href:"/docs/implicit-values#gwen-accumulated-errors",children:(0,r.jsx)(n.code,{children:"gwen.accumulated.errors"})})," variable."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gherkin",metastring:"{4} showLineNumbers",children:'  Then @Soft x should not be blank\n   And @Soft y should be "1"\n   And @Soft z should be true\n   And errors is "${gwen.accumulated.errors}"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If the assertions on line 1 and 3 fail, ",(0,r.jsx)(n.code,{children:"errors"})," on line 4 will contain:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"2 errors:\n(1) x should not be blank\n(2) z should be true but got false\n"})}),"\n",(0,r.jsx)(n.h4,{id:"json-form",children:"JSON Form"}),"\n",(0,r.jsxs)(n.p,{children:["You can also reference the accumulated error messages as a JSON array through the implicit ",(0,r.jsx)(n.a,{href:"/docs/implicit-values#gwen-accumulated-errors-json-array",children:(0,r.jsx)(n.code,{children:"gwen.accumulated.errors:JSONArray"})})," variable.  This approach is very flexible as it allows you to customise."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gherkin",metastring:"{4} showLineNumbers",children:'  Then @Soft x should not be blank\n   And @Soft y should be "1"\n   And @Soft z should be true\n   And errors is defined by js\n       """\n       () => {\n         const errorsJson = ${gwen.accumulated.errors:JSONArray}\n         return `${errorsJson.length} error(s) = ${errorsJson.join(\', \')}`\n       }\n       """\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If the assertions on line 1 and 3 fail, ",(0,r.jsx)(n.code,{children:"gwen.accumulated.errors:JSONArray"})," will resolve to:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'["x should not be blank","z should be true but got false"]\n'})}),"\n",(0,r.jsxs)(n.p,{children:["And ",(0,r.jsx)(n.code,{children:"errors"})," will evaluate to:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"2 error(s) = x should not be blank, z should be true but got false\n"})}),"\n",(0,r.jsx)(n.p,{children:"You could also use it to get the number of errors as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gherkin",children:'   And error count is defined by js "${gwen.accumulated.errors:JSONArray}.length"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This ",(0,r.jsx)(n.code,{children:"error count"})," expression would evaluate to 2 in this example."]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},9365:(e,n,s)=>{s.d(n,{A:()=>i});s(6540);var r=s(4164);const t={tabItem:"tabItem_Ymn6"};var a=s(4848);function i(e){let{children:n,hidden:s,className:i}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(t.tabItem,i),hidden:s,children:n})}},1470:(e,n,s)=>{s.d(n,{A:()=>y});var r=s(6540),t=s(4164),a=s(3104),i=s(6347),o=s(205),l=s(7485),d=s(1682),c=s(679);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:s}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:s,attributes:r,default:t}}=e;return{value:n,label:s,attributes:r,default:t}}))}(s);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,s])}function m(e){let{value:n,tabValues:s}=e;return s.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:s}=e;const t=(0,i.W6)(),a=function(e){let{queryString:n=!1,groupId:s}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:n,groupId:s});return[(0,l.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(t.location.search);n.set(a,e),t.replace({...t.location,search:n.toString()})}),[a,t])]}function g(e){const{defaultValue:n,queryString:s=!1,groupId:t}=e,a=h(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=s.find((e=>e.default))??s[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:a}))),[d,u]=p({queryString:s,groupId:t}),[g,x]=function(e){let{groupId:n}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,a]=(0,c.Dv)(s);return[t,(0,r.useCallback)((e=>{s&&a.set(e)}),[s,a])]}({groupId:t}),f=(()=>{const e=d??g;return m({value:e,tabValues:a})?e:null})();(0,o.A)((()=>{f&&l(f)}),[f]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),x(e)}),[u,x,a]),tabValues:a}}var x=s(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=s(4848);function b(e){let{className:n,block:s,selectedValue:r,selectValue:i,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,a.a_)(),c=e=>{const n=e.currentTarget,s=l.indexOf(n),t=o[s].value;t!==r&&(d(n),i(t))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const s=l.indexOf(e.currentTarget)+1;n=l[s]??l[0];break}case"ArrowLeft":{const s=l.indexOf(e.currentTarget)-1;n=l[s]??l[l.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":s},n),children:o.map((e=>{let{value:n,label:s,attributes:a}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>l.push(e),onKeyDown:u,onClick:c,...a,className:(0,t.A)("tabs__item",f.tabItem,a?.className,{"tabs__item--active":r===n}),children:s??n},n)}))})}function v(e){let{lazy:n,children:s,selectedValue:a}=e;const i=(Array.isArray(s)?s:[s]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function w(e){const n=g(e);return(0,j.jsxs)("div",{className:(0,t.A)("tabs-container",f.tabList),children:[(0,j.jsx)(b,{...n,...e}),(0,j.jsx)(v,{...n,...e})]})}function y(e){const n=(0,x.A)();return(0,j.jsx)(w,{...e,children:u(e.children)},String(n))}},7104:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/hard-assertions-154ace8ca4fb6423b88b168d9ac13848.png"},917:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/soft-assertions-622a9a970891c171d5a6561039f6faab.png"},1933:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/sustained-assertions-6f9136c29381b524c0ed6d556d35325c.png"},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var r=s(6540);const t={},a=r.createContext(t);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);